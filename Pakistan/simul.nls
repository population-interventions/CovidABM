;;
;; Simulants and functions particular to simulants that don't have anywhere else to live.
;;

breed [ simuls simul ]

simuls-own [
  inQuarantine ;; whether the person is in ICU or not
  sensitivity ;; person's sensitivity to news about the pandemic
  R ;; the estimated RNaught of individuals
  contacts ;; the number of contacts the person has made in the model
  IncubationPd ;; the incubation perios of the illness ascribed to the person
  DailyRisk ;; the risk of death of the person per day based on their agerange
  RiskofDeath ;; the overall risk of deth for the person if they contract the illness based on their age
  Pace ;; the speed that pthe person moves around the environment

  ownIllnessPeriod ;; unique illness period associated with the individual
  ownIncubationPeriod ;; unique incubation pd for the person - related to IncubationPd so can probably be cleaned up - IncubationPd is a legacy var as previously all incubation periods were identical
  personalVirulence ;; the infectivity of the person

  timenow ;; the number of days since initial infection
  caseReportTime ;; Day on which the case will be reported
  
  tracked ;; whether the person has been tracked by the health system
  asymptomaticFlag ;; indicator identifying Asymptomatic cases
  asymptomatic_draw ;; Determines whether the agent will be asymptomatic
  symtomatic_present_day ;; When the simulant self-presents (if at all)
  
  proportion_people_avoid_draw ;; Determines whether this agent heeds avoiding at various lockdown stages

  RequireICU ;; Whether the agent requires ICU at the moment
  requireICU_draw ;; Random determiner [0, 1) of whether the agent requires ICU

  EssentialWorkerPriority ;; Value from 0 - 100 that sets priority of the job. 1 is high, 100 is low.
  EssentialWorkerFlag ;; indicator of whether the person is considered to be an essential worker under the current lockdown policy.
  
  cohortIndex ;; The row of population.csv that this simulant is based on
  agerange ;; the age of the person
  atsi
  comorbidityState ;; does the person have a comorbidity
  essentialJob ;; Static indicator of whether the agent's job is most essential, which gives it higher EssentialWorkerPriority (ie closer to zero).
  isWorker
  
  VaccPhase ;; phase at which this person would receive vaccine
  VaccSubPhase ;; subphase at which this person would receive vaccine (1a, 1b etc)
  sm_vac_uptake ;; Likelyhood of taking a vaccine if offered
  
  vaccinated ;; is the person vaccinated?
  vaccineOffered ;; Has the vaccine been offered?
  vacWaitDays ;; Timer for the delay in vaccine coming into effect.
  selfVaccEffMultiplier ;; Multiplier for disease effects, (1 - vaccine efficacy)

  wearsMask ;; for use in determining if the person wears a face mask
  wearingMask ;; identifies if the person is wearing a mask or not

  householdUnit ;; the id of the household the person belongs to
  studentFlag ;; identifies if the person is a student or not
  currentVirulence ;; current virulence of the person on the day of their infection
  Imported ;; identifies imported cases
  adultsInHousehold ;; counts how many adults in a household for peole under 70
  homeLocation ;; this is where these people live
  returntoschool ;; a random number between 0 and 100 that determines whether the person will return to school (assuming they are a student) at time x

  isolateCompliant ;; Is the person currently isolating this tick (because they are succeptible and isolating, or infected and tracked)
  isolating ;; is a succeptible person supposed to be isolating?
  noticeOwnInfection ;; Has the person noticed that they are sick and are now being tracked and isolated of their own volition?
  IDTime ;; days into infection the person is identified as a case

  contacts7 ;; contacts from seven days ago
  contacts6
  contacts5
  contacts4
  contacts3
  contacts2
  contacts1 ;; contacts from today
  
  ;; Unused
  ;anxiety ;; person's level of anxiety aboutt he pandemic
]

;;*******************************************************************************************************************************
;;** Simul Utility Functions **
;;*******************************************************************************************************************************

to simul_updatepersonalvirulence
  ;; creates a triangular distribution of virulence that peaks at the end of the incubation period
  if color = red [
    ;print "simul_updatepersonalvirulence"
    ;print who
    ;print days
    ;print personalVirulence
    ;print timenow
    ;print ownIncubationPeriod
    ;print ownIllnessPeriod
    if timenow <= Non_Infective_Time [
      set currentVirulence 0
    ]
    if timenow > Non_Infective_Time and timenow <= ownIncubationPeriod [
      set currentVirulence personalVirulence * ( (timenow - Non_Infective_Time) / (ownIncubationPeriod - Non_Infective_Time) )
    ]
    if timenow > ownIncubationPeriod [
      set currentVirulence personalVirulence * ( ( ownIllnessPeriod - timenow ) / ( ownIllnessPeriod - ownIncubationPeriod ))
    ]
    ;if vaccinated = 1 [
    ;  show (word "cine " vaccinated ",time " timenow ",VIR " (currentVirulence / personalVirulence) ",unscale " currentVirulence)
    ;]
    ;set currentVirulence 0
  ]
  ;show (word "personalVirulence " personalVirulence ",ownIncubationPeriod " ownIncubationPeriod ",ownIllnessPeriod " ownIllnessPeriod)
end

to simul_resetlanding
  ;; now working so home locations are not in green space
  ifelse table:has-key? houseLocationTable householdUnit 
  [
    set homeLocation table:get houseLocationTable householdUnit
  ]
  [
    move-to one-of patches with [ pcolor = black and houseIndex = -1 ]
    let houseNumber householdUnit
    ask patch-here [
      set houseIndex houseNumber
    ]
    set homeLocation patch-here
    table:put houseLocationTable householdUnit patch-here
  ]
  
  ifelse 50 > random 100 
  [
    move-to one-of patches with [ pcolor = black ]
  ]
  [
     move-to homeLocation
  ]
  ;; iterates / sorts people into households
end

to simul_resampleHouse
  table:put houseStudentMoveCache_lastUpdate householdunit -1
  
  set householdUnit random houseTotal
  
  table:put houseStudentMoveCache_lastUpdate householdunit -1
  table:put houseTrackedCaseTimeTable householdunit -1
  
  simul_resetlanding
end

to simul_resampleHouse_infected
  table:put houseStudentMoveCache_lastUpdate householdunit -1
  
  set householdUnit random floor (houseTotal * 0.1125)
  
  table:put houseStudentMoveCache_lastUpdate householdunit -1
  table:put houseTrackedCaseTimeTable householdunit -1
  
  simul_resetlanding
end
  
to simul_resampleHouse_not_infected
  table:put houseStudentMoveCache_lastUpdate householdunit -1
  
  set householdUnit floor (houseTotal * 0.1) + random floor (houseTotal * 0.9) 
  
  table:put houseStudentMoveCache_lastUpdate householdunit -1
  table:put houseTrackedCaseTimeTable householdunit -1
  
  simul_resetlanding
end
  
to simul_move_to_empty_patch
  let movePatch one-of neighbors with [ lastUtilTime < ticks ]
  if is-patch? movePatch [
    move-to movePatch
    ask movePatch [
      set lastUtilTime ticks
    ]
  ]
end

to simul_resetSomeRandomParams
  set ownIllnessPeriod ( exp random-normal M S ) ;; log transform of illness period
  set ownIncubationPeriod ( exp random-normal Minc Sinc ) ;;; log transform of incubation period
  set proportion_people_avoid_draw random 100
end

to simul_updateIsolationResponse
  set pace span
  set isolateCompliant 0
  
  if (Case_Isolation and (isolating = 1 or tracked = 1)) or (isolate_on_inf_notice and noticeOwnInfection = 1)[
    ifelse isolating = 1 and color = cyan
    [
      if draw_isolationCompliance * Household_Iso_Factor > random-float 1 [
        move-to homelocation
        set pace 0
        set isolateCompliant 1
      ]
    ]
    [
      ;; Full strength isolation for reported cases
      ifelse caseReportTime >= ticks
      [
        if draw_isolationCompliance * Infect_Iso_Factor > random-float 1 [
          move-to homelocation
          set pace 0
          set isolateCompliant 1
        ]
      ]
      [
        if draw_isolationCompliance * Track_Iso_Factor > random-float 1 [
          move-to homelocation
          set pace 0
          set isolateCompliant 1
        ]
      ]
    ]
  ]
end

to simul_setEndR
  ;print R_measure_time
  if R_measure_time < ticks [
    set totalEndR totalEndR + R
    set totalEndCount totalEndCount + 1
    set endR_sum endR_sum + R
    set endR_count endR_count + 1
  ]
end

to simul_do_scaleup
  set size 2
  set color cyan
  set timenow 0
  set noticeOwnInfection 0
  set inQuarantine 0
  set sensitivity random-float 1
  set imported 0
  set tracked 0
  set isolating 0
  set R 0
  
  move-to one-of patches with [ pcolor = black ]
  simul_resetSomeRandomParams
  simul_resampleHouse ;; Check that this makes sense.
  
  set returntoschool random 100
end

;;*******************************************************************************************************************************
;;** Simul Once-A-Tick Functions **
;;*******************************************************************************************************************************

to simul_record_patch_infectiveness
  if color = red and currentVirulence > 0 [
    let localInfectiveness currentVirulence
    if wearingMask = 1 [
      set localInfectiveness (localInfectiveness * (1 - draw_maskWearEfficacy)) * Mask_Efficacy_Mult
    ]
    if asymptomaticFlag = 1 [
      set localInfectiveness (localInfectiveness * Asymptomatic_Trans)
    ]
    if vaccinated = 1 [
      set localInfectiveness (localInfectiveness * selfVaccEffMultiplier)
      ;show (word "infect " selfVaccEffMultiplier)
    ]
    if isolateCompliant = 1 [
     set localInfectiveness (localInfectiveness * Isolation_Transmission )
    ]
    
    ;print "currentVirulence"
    ;print currentVirulence
    ;print ownMaskEfficacy
    ;print Asymptomatic_Trans
    ;print localInfectiveness
    
    let myPatch patch-here
    let thisSimul self
    ask myPatch [
      if lastInfectionUpdate < ticks [
        set infectionList []
        set lastInfectionUpdate ticks
      ]
      set infectionList lput localInfectiveness infectionList
      if track_R [
        table:put infectionCulprit localInfectiveness thisSimul
      ]
    ]
  ]
end

to simul_update_patch_utilisation
  let myPatch patch-here
  ask myPatch [
    set lastUtilTime ticks
  ]
end

to simul_infect
  if color = cyan [
    let mySucceptibility 1
    if wearingMask = 1 [
      set mySucceptibility (mySucceptibility * (1 - draw_maskWearEfficacy)) * Mask_Efficacy_Mult
    ]
    if vaccinated = 1 [
      set mySucceptibility (mySucceptibility * selfVaccEffMultiplier)
      ;show (word "succ " selfVaccEffMultiplier)
    ]
    let myPatch patch-here
    let localInfectionList 0
    let localInfectionCulprit 0
    ask myPatch [
      if lastInfectionUpdate >= ticks [
        set localInfectionList infectionList
        if track_R [
          set localInfectionCulprit infectionCulprit
        ]
      ]
    ]
    
    if is-list? localInfectionList [
      foreach infectionList [ x ->
        ;print "x"
        ;print x
        if color = cyan [
          set transmission_count transmission_count + 1
          set transmission_sum transmission_sum + mySucceptibility * x
          
          if mySucceptibility * x > random-float 1 [
            set color red
            set isolating 0
            set timenow 0
            set infectionsToday_acc infectionsToday_acc + 1
            set new_case_real_counter new_case_real_counter + Scale_Factor ^ scalephase
            ifelse vaccinated = 1
            [
              array:set infectVacArray cohortIndex (array:item infectVacArray cohortIndex) + Scale_Factor ^ scalephase
            ]
            [
              array:set infectNoVacArray cohortIndex (array:item infectNoVacArray cohortIndex) + Scale_Factor ^ scalephase
            ]
            if track_R [
              ask table:get localInfectionCulprit x [
                set R R + 1
              ]
            ]
          ]
        ]
      ]
    ]
  ]
end

to simul_move
  ;; describes the circumstances under which people can move and infect one another
  if ticks > 1 and inQuarantine = 0 and isolateCompliant = 0 [
    ;; this is assigned per agent so day and night are not aligned across people - this is deliberate
    ifelse random 2 = 1
    [
      set heading (heading - 90) + random 180
      jump random pace
    ]
    [
      move-to homeLocation
    ]
  ]
end

to simul_visitDestination
  ;; sets up destinations where people might gather and set off superspreader events
  ;; reduces large gatherings by stage
  if inQuarantine = 0 and isolateCompliant = 0 and Visit_Frequency > random-float 1  [
    let movePatch one-of destination_patches in-radius Visit_Radius
    if is-patch? movePatch [
      move-to movePatch
    ]
  ]
  ;; essential workers do not have the same capacity to reduce contact as non-esssential
end

to simul_avoid
  ;; so, if the social distancing policies are on and you are distancing at this time and you are not part of an age-isolated
  ;; group and you are not an EssentialWorkerPriority, then if there is anyone near you, move away if you can.♦
  if inQuarantine = 0 and isolateCompliant != 1 [
    ;; if you are an essential worker, you can only reduce your
    ;; contacts when you are not at work assuming 8 hours work, 8 hours rest, 8 hours recreation - rest doesn't count for anyone, hence it is
    ;; set at 50 on the input slider. People don't isolate from others in their household unit
    (ifelse (EssentialWorkerFlag = 0 or Ess_W_Risk_Reduction > random 100) and Spatial_Distance = true
      and Proportion_People_Avoid + draw_ppa_modifier > proportion_people_avoid_draw
      and Proportion_Time_Avoid + draw_pta_modifier > random 100
      [
        let myHouse householdUnit
        ifelse studentFlag = 1 and schoolsOpen
        [
          ;; students don't isolate from each other or their household unit
          if any? other simuls-here with [ householdUnit != myHouse or studentFlag != 1 ] [
            simul_move_to_empty_patch
          ]
        ]
        [
          if any? other simuls-here with [ householdUnit != myHouse ] [
            simul_move_to_empty_patch
          ]
        ]
      ]
      [
        ;; otherwise just avoid ICU (we already moved)
        simul_update_patch_utilisation
    ])
  ]
  move-to patch-here
end

to simul_superSpread
  if inQuarantine = 0 and isolateCompliant = 0 and superspreaders > random-float 1 [
    move-to one-of destination_patches
  ]
end

to simul_settime
  ;; asks simuls to start counting the days since they became infected and to also possibly die
  ;; dying this way currently not implemented but done at the end of the illness period, instead
  if color = red [
    set timenow timenow + 1
    if tracked = 1 and caseReportTime = ticks [
      set casesReportedToday_acc casesReportedToday_acc + 1
    ]
  ]
end

to simul_end_infection
  ;; Recover or die at the end of infectious period.
  if timenow > ownillnessperiod and color != black [
    if track_R [
      simul_setEndR 
    ]
  ]
  if color = red and timenow > ownillnessperiod [
    ifelse (vaccinated = 0 and RiskofDeath > random-float 1) or (vaccinated = 1 and RiskofDeath * draw_vacc_death_risk_mult > random-float 1)
    [
      set deathcount deathcount + Scale_Factor ^ scalephase
      array:set dieArray cohortIndex (array:item dieArray cohortIndex) + Scale_Factor ^ scalephase 
    ]
    [
      set recovercount recovercount + Scale_Factor ^ scalephase
    ]
    
    ;; May as well set color to yellow since dead and infected people have a similar effect on the simulation.
    ;; Very few people die in the low scales as a proportion of the total population.
    set color yellow
    set R 0
    set timenow 0
    set noticeOwnInfection 0
    set requireICU 0
    set inQuarantine 0
    set isolating 0
    set tracked 0
  ]
end

to simul_EssentialWorkerID
  ;; identifies essential workers
  ifelse EssentialWorkerPriority < Essential_Workers
  [
    set EssentialWorkerFlag 1
  ]
  [
    set EssentialWorkerFlag 0
  ]
end

to simul_checkMask
  ;; identifies people who waear a mask
  ifelse maskPolicy and wearsMask <= mask_Wearing and patch-here != homelocation
  [
    set wearingMask 1
  ]
  [
    set wearingMask 0
  ]
end

to simul_updateHouseTrackedCase
  ;; Add and Case_Reporting_Delay <= ticks to only isolate with confirmed cases in a household.
  if color = red and tracked = 1 [
    table:put houseTrackedCaseTimeTable householdunit ticks
  ]
end

to simul_isolateAndTrackFromHouseHold
  ;; this identifies people in the system earlier because they get a test straight away having been a close contact of someone in their house
  if isolating = 1 and color = red [
    if tracked = 0 [
      set caseReportTime ticks + Case_Reporting_Delay
    ]
    set tracked 1
  ]
  
  if color = cyan or (color = red and tracked = 0) [
    ifelse table:get houseTrackedCaseTimeTable householdunit = ticks
    [
      if color = cyan [
        set isolating 1
      ]
      if color = red [
        if tracked = 0 [
          set caseReportTime ticks + Case_Reporting_Delay
        ]
        set tracked 1
      ]
    ]
    [
      set isolating 0
    ]
  ]
end
