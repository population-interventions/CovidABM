;; Functions that are not referenced anywhere else.

;; Parts of main that are not used.
to go
  ;ask resources [
  ;  deplete
  ;  replenish
  ;  resize
  ;  spin
  ;]
  ;ask packages [
  ;  absorbshock
  ;  movepackages
  ;]
  
  ;CruiseShip
  ;; controls the amount of time that interactions happen outside
  ;updateoutside
  ;updatestudentStatus
  ;; Randomly set some simulants to be infected, to simulate overseas cases. They have imported = 1.
  ;OSCase
  ;; Spontaneously generate a case if ticks < Triggerday and there are fewer than three cases.
  ;stopFade
  ;seedCases
  ;; Reverses the initiation of social distancing and isolation policies over time.
  ;Unlock
  ;; Reduce ppa and pta usage if complacency = True.
  ;linearbehdecrease
  ;calculateCashPosition
  ;; Set anxiety factor based on some infected/dead/recovered count, multiplied by media_Exposure
  ;Globalanxiety
  ;; ensures that policies are enacted if their master switches are set to true at the time of the policy switch turning on (?)
  ;turnOnTracking
  ;; Enable distancing, isolation and quarantine based on triggers
  ;TriggerActionIsolation
  ;; Mouse click does something interactive
  ;DeployStimulus
  ;; Randomly move infected people  who are untracked or unaware they are sick to new areas, based on the Superspreaders parameter, set in Stages.
  ;SuperSpread
  
  
  ;setInitialReserves
  ;; Set AverageContacts. Doesn't appear to do anything?
  CalculateAverageContacts
  ;; Set objFunction. Doesn't appear to do anything.
  calculateObjfunction
  ;; Average "days into infection the person is identified as a case" of suceptible agents.
  CalculateMeanIDTime
  calculateEliminationDate

  ;; Average R of infected simulants.
  calculateMeanR
  
  ;; set meanDaysInfected
  calculateMeanDaysInfected
  ;; counts infections among Essential workers
  countEWInfections
  ;; counts infections among school students
  countSchoolInfections
end


  ;; allocates adults to a household unit range
  ask simuls with [ agerange > 18 and agerange <= 60 ] [
    if 95 > random 100 [
      set householdUnit random 600
    ]
  ]

  ;; allocated older adults to household Units that don't include young children or teenagers
  ask simuls with [ agerange > 60 and agerange <= 80 ] [
    if 95 > random 100 [
      set householdUnit random 200 + 600
    ]
  ]

  ;; allocated older adults 80+ to household Units that don't include young children or teenagers
  ask simuls with [ agerange > 80 ] [
    if 95 > random 100 [
      set householdUnit random 300 + 600
    ]
  ]

  ;; allocates up to two adults per household
  let houseNumber 0
  let allocCount 0
  ask simuls with [ agerange > 18 and agerange <= 60 ] [
    if 95 > random 100 [
      set householdUnit houseNumber
      set allocCount allocCount + 1
      if allocCount >= 2 [
        set houseNumber houseNumber + 1
        set allocCount 0
      ]
    ]
  ]
  
  ;; Identifies students
  ask simuls with [ agerange <= 18 ] [
    if 95 > random 100 [
      set householdUnit random houseNumber
    ]
  ]

  ;; allocates children and teenagers to a household where there are adults at least 20 years older than them and there are not more than 2 adults in the house
  ask simuls [
    if agerange < 20 [
      set studentFlag 1
    ]
  ]

to superSpread
  if count simuls with [ color = red and tracked = 0 ] > 1 and Case_Isolation = false [
    if Superspreaders > random 100 [
      ;; asks some people who are infected and not tracked to move to random new areas,
      ;;potentially among susceptible people if travel restrictions are not current
      ask n-of int (count simuls with [ color = red and tracked = 0 ] / Diffusion_Adjustment ) simuls with [ color = red and tracked = 0 ] [
        forward world-width / 2
      ]

      ;; same as above but for recovered people to take into account immunity in the population
      if count simuls with [ color = yellow ] >= Diffusion_Adjustment [
        ask n-of int ( count simuls with [ color = yellow ] / Diffusion_Adjustment ) Simuls with [ color = yellow ] [
          forward world-width / 2
        ]
      ]
    ]
  ]

  if count simuls with [ color = red and timenow < ownIncubationPeriod and tracked = 0 ] > Diffusion_Adjustment and Case_Isolation = true [
    if Superspreaders > random 100 [
      ;; only moves people who don't know they are sick yet
      ask n-of int (count simuls with [ color = red and timenow < ownIncubationPeriod and tracked = 0 ] / Diffusion_Adjustment ) simuls
          with [ color = red and timenow < ownIncubationPeriod and tracked = 0 ] [
        forward world-width / 2
      ]

      ;; this ensures that people with immunity also move to new areas, not just infected people
      if count simuls with [ color = yellow ] >= 1 [
        ask n-of int (count simuls with [ color = yellow ] / Diffusion_Adjustment) simuls with [ color = yellow ] [
          forward world-width / 2
        ]
      ]
    ]
  ]
end

to scaledown
  ;; reverses the procedure above after the peak of the epidemic
  ask simuls with [ color = red ] [
    hatch (Scale_Factor - 1) [
      ;; Doesn't this give them all the same household???
      move-to one-of patches with [ pcolor = black ]
      
      ;; Re-randomise some things
      simul_resetSomeRandomParams
    ]
  ]

  set contact_Radius Contact_radius - (90 / 4)
  set scalephase scalephase - 1
  
  scaledownhatch
end

to scaledownhatch
  ;; removes excess simuls fromt the scaled-down view
  let vaccineRemovals 0
  let vaccineWait []
  let vaccineEff []
  if count simuls > Population [
    ask n-of ( count simuls - Population ) simuls with [ color != red or color != black ] [
      if vaccinated = 1 or vacWaitDays > 0 [
        set vaccineWait lput vacWaitDays vaccineWait
        set vaccineEff lput vacWaitDays vaccineEff
        set vaccineRemovals vaccineRemovals + 1
      ]
      die
    ]
  ]
  
  let eligibleSimul simuls with [ color = cyan and vacWaitDays = 0 and vaccinated = 0 ]
  if count eligibleSimul < vaccineRemovals [
   set vaccineRemovals count eligibleSimul
  ]
  
  let index 0
  ask n-of vaccineRemovals eligibleSimul [
    set vacWaitDays item index vaccineWait
    set selfVaccEffectiveness item index vaccineWait
    if vacWaitDays = 0 [
      set shape "person"
      set vaccinated 1
      
      ;; Reduce illness length
      set ownincubationperiod ( ownincubationperiod * (1 - selfVaccEffectiveness) )
      set ownillnessperiod (ownillnessperiod * (1 - selfVaccEffectiveness) )
    ]
    
    set index index + 1
  ]
end

;; *********************************************************************************************************
;; **** Counting
;; *********************************************************************************************************

to setup
  ;; allocates children to households
  if schoolsOpen = true [
    ask simuls with [ agerange > 18 and agerange <= 60 ] [
      ;; allows for upo 5% of houses to be sharehouses / care facilities, etc.
      if count simuls with [householdUnit = [ householdUnit ] of myself ] > 2 and 95 > random 100 [
        set householdUnit random 600
      ]
    ]
    ask simuls with [ agerange > 60 ] [
      ;; allows for older people in group homes to make up to 7% of housing units
      if count simuls with [ householdUnit = [ householdUnit ] of myself ] > 2 and 93 < random 100 [
        set householdUnit [ householdUnit ] of one-of simuls
            with [ count other simuls with [ householdUnit = [ householdUnit ] of myself ] = 0 ]
      ]
    ]
  ]
end

;; *********************************************************************************************************
;; **** Counting
;; *********************************************************************************************************

to CalculateAverageContacts
  ;; calculates average contacts for simuls and average financial contacts, which are contacts with people who have positive 
  ;; cash reserves (?)
  if ticks > 0 [
    set AverageContacts mean [ contacts ] of simuls with [ color != black ]
  ]
end

to calculateObjfunction
  ;; moderate
  if ticks > 1 and numberinfected != 0 [
    set objFunction ( log numberInfected 10 ) + 1 * (1 - ( mean [ contacts ] of simuls ) )
  ]
end


to CalculateMeanIDTime
  let IDTimeList [ IDTime ] of simuls with [ color != cyan ]
  ifelse not empty? IDTimeList
  [
    set meanIDTime mean IDTimeList
  ]
  [
    set meanIDTime 0
  ]
end

to countEWInfections
  ;; counts infections among Essential workers
  let EWInfects (count simuls with [ color = red and EssentialWorkerFlag = 1 ] )
  set EWInfections EWInfects * Scale_Factor ^ scalephase
end

to countSchoolInfections
  ;; counts infections among school students
  let studentInfects ( count simuls with [ color = red and StudentFlag = 1 ] )
  set studentInfections studentInfects * Scale_Factor ^ scalephase
end

to calculateEliminationDate
  ;; records the day that no infected people remain in the environment
  if ticks > 1 and count simuls with [ color = red ] = 0 and eliminationDate = 0 [
    set eliminationDate ticks
  ]
end

to calculateMeanDaysInfected
  if any? simuls with [ color = red ] [
    set meanDaysInfected ( mean [ timenow ] of simuls with [ color = red ] )
  ]
end


to calculateMeanr
  ifelse any? simuls with [ color = red and timenow = int ownillnessperiod ]
  [
    set meanR ( mean [ R ] of simuls with [ color = red and timenow = int ownillnessperiod ])
  ]
  [
    ;; calculates mean Reff for the population
    set MeanR MeanR
  ]
end

;; *********************************************************************************************************
;; **** Functions that reference policyTriggerOn or triggerday
;; *********************************************************************************************************

to stopfade
  ;; prevents cases from dying out in the eraly stage of the trials when few numbers exist
  if freewheel != true [
    if ticks < Triggerday and count simuls with [ color = red ] < 3 [
      ask n-of 1 simuls with [ color = cyan ] [
        set color red
        set timenow int ownIncubationPeriod - 1
        set EssentialWorkerPriority random 100
      ]
    ]
  ]
end

to TriggerActionIsolation
  ;; sets the date for social isolation and case isolation
  if PolicyTriggerOn = true and Freewheel = false [
    if ticks >= Triggerday and Freewheel = false [
      set Spatial_Distance true
      set Case_Isolation true
      set Quarantine true
    ]
  ]
end

to OSCase
  if policytriggeron = true and count simuls with [ color = red and imported = 0 ] > 1 [
    let totallocal count simuls with [ color != cyan and imported = 0 ]
    let totalimported count simuls with [ imported = 1 ]
    let ratio ( totalimported / (totallocal + totalimported) )

    ;; contributes additional cases as a result of OS imports prior to lockdown
    if ticks <= triggerday and OS_Import_Switch = true and ratio < OS_Import_Proportion [
      ask n-of ( count simuls with [ color = red ] * .10 ) simuls with [ color = cyan ] [
        set color red
        set timenow int ownIncubationPeriod - random-normal 1 .5
        set EssentialWorkerPriority random 100
        set imported 1
      ]
    ]

    ;; creates steady stream of OS cases at beginning of pandemic
    if ticks <= triggerday and OS_Import_Switch = true [
      ask n-of 1 simuls with [ color = cyan ] [
        set color red
        set timenow int ownIncubationPeriod - random-normal 1 .5
        set EssentialWorkerPriority random 100
        set imported 1
      ]
    ]

    ;; contributes additional cases as a result of OS imports after lockdown
    if ticks > triggerday and OS_Import_Switch = true and ratio < OS_Import_Post_Proportion [
      ask n-of ( count simuls with [ color = red ] * .05 ) simuls with [ color = cyan ] [
        set color red
        set timenow int ownIncubationPeriod - random-normal 1 .5
        set EssentialWorkerPriority random 100
        set imported 1
        set tracked 1
      ]
    ]
  ]
end

to turnOnTracking
  ;; ensures that policies are enacted if their master switches are set to true at the time of the policy switch turning on
  if freewheel != true [
    if policyTriggerOn = true and ticks >= triggerday and schoolsOpen = true [
      set tracking true
      set schoolsOpen true
    ]
    if policyTriggerOn = true and ticks >= triggerday [
      set tracking true
    ]
    set link_switch true
  ]
end

To Unlock
  ;; reverses the initiation of social distancing and isolation policies over time. Recognises that the policies are interpreted
  ;; and adherence is not binary. Adherence to policies is associated with a negative exponential curve linked to the current day
  ;; and the number of days until the policies are due to be relaxed at which point they are relaxed fully.

  if Complacency = true and PolicyTriggerOn = true and LockDown_Off = true and ticks >= Triggerday
      and int Proportion_People_Avoid > ResidualCautionPPA [
    set PPA (PPA - 1 )
    set Proportion_People_Avoid PPA
  ]

  if Complacency = true and PolicyTriggerOn = true and LockDown_Off = true and ticks >= Triggerday
      and int Proportion_Time_Avoid > ResidualCautionPTA [
    set PTA (PTA - 1 )
    set Proportion_Time_Avoid PTA
  ]
end

to linearbehdecrease
  if complacency = true [
    if ticks > triggerday and ppa > ResidualCautionppa [
      set ppa (ppa - 1)
      set pta ( pta - 1)
    ]
  ]
end

;; *********************************************************************************************************
;; **** Simul Functions
;; *********************************************************************************************************

to simul_countcontacts
  if color != red [
    set contacts7 contacts6
    set contacts6 contacts5
    set contacts5 contacts4
    set contacts4 contacts3
    set contacts3 contacts2
    set contacts2 contacts1

    set contacts1 (count other simuls-here with [ color != black and householdUnit != [ householdUnit ] of myself ])
    ;; or alternatively add the following ## and householdUnit != [ householdUnit ] of myself

    set contacts ( contacts1 + contacts2 + contacts3 + contacts4 + contacts5 + contacts6 + contacts7 ) / 7
  ]
end

to simul_createanxiety
  ;; a fairly unsophisticated (currently unused) means of allocating anxiety around COVID-19 to people - will be updated
  set anxiety ( anxiety + anxietyfactor ) * random-normal .9 .1
  if anxiety < 0 [
    set anxiety 0
  ]
end

to simul_gatherreseources
  if (anxiety * sensitivity) > random 100 and count resources > 0 and inQuarantine = 0 [
    face min-one-of resources with [ volume >= 0 ] [ distance myself ]
  ]
  if any? resources-here with [ volume >= 0 ] and anxiety > 0 [
    set anxiety mean [ anxietyfactor ] of neighbors
    move-to one-of patches with [ pcolor = black ]
  ]
end

to simul_AccessPackage
  ;; enables people to access the support packages
  if any? Packages in-radius 10 and reserves < 0 [
    set reserves 100
  ]
end

;; *********************************************************************************************************
;; *********************************************************************************************************

to Globalanxiety
  ;; levels of global anxiety are tied to knowledge of dead and infected
  ;; people multiplied by media exposure of dead and infected people
  let anxiouscohort (count simuls with [ color = red ] + count simuls with [ color = black ] - count simuls with [ color = yellow ] ) / Total_Population
  set anxietyFactor anxiouscohort * media_Exposure * Scale_Factor ^ scalephase
end

to updateoutside
  ;; controls the amount of time that interactions happen outside
  if count patches with [ pcolor = green ] < ( Outside * (count patches) ) [
    ask n-of random 10 patches with [ pcolor = black ] [
      set pcolor green
    ]
  ]
  if count patches with [ pcolor = green ] > ( Outside * (count patches) ) [
    ask n-of random 10 patches with [ pcolor = green ] [
      set pcolor black
    ]
  ]
end

;; This code used to infect simulants. It is unclear what it was meant to do.
to simul_infect_old
  ;; reduces capacity of asymptomatic people to pass on the virus by Asymptomatic_Trans
  if any? other simuls-here
      with [ color = red and asymptomaticFlag = 1 and ( currentVirulence * Asymptomatic_Trans ) > random 100 and wearingMask = 0 ]
      and color = cyan [
    set color red
    set timenow 0
    simul_traceme
  ]

  ;; people who are symptomatic pass on the virus at the rate of their personal virulence, which is drawn from population means
  if any? other simuls-here
      with [ color = red and asymptomaticFlag = 0 and currentVirulence > random 100 and wearingMask = 0 ]
      and color = cyan [
    set color red
    set timenow 0
    simul_traceme
  ]

  ;; accounts for a % reduction in transfer through mask wearing
  if any? other simuls-here
      with [ color = red and asymptomaticFlag = 1 and ( currentVirulence * Asymptomatic_Trans ) > random 100 and wearingMask = 1 ]
      and color = cyan and random 100 > ownMaskEfficacy [
    set color red
    set timenow 0
    simul_traceme
  ]

  ;; accounts for a % reduction in transfer through mask wearing
  if any? other simuls-here
      with [ color = red and asymptomaticFlag = 0 and currentVirulence > random 100 and wearingMask = 1 ]
      and color = cyan and random 100 > ownMaskEfficacy [
    set color red
    set timenow 0
    simul_traceme
  ]

  ;; asymptomatic and wearing mask
  if any? other simuls-here
      with [ color = cyan ] and color = red and Asymptomaticflag = 1 and ( currentVirulence * Asymptomatic_Trans ) > random 100
      and wearingMask = 1 and random 100 > ownMaskEfficacy [
    set R R + 1
    set GlobalR GlobalR + 1
  ]

  ;; symptomatic and wearing mask
  if any? other simuls-here
      with [ color = cyan ] and color = red and Asymptomaticflag = 0 and currentVirulence > random 100
      and wearingMask = 1 and random 100 > ownMaskEfficacy [
    set R R + 1
    set GlobalR GlobalR + 1
  ]

  ;; asymptomatic and not wearing mask
  if any? other simuls-here
      with [ color = cyan ] and color = red and Asymptomaticflag = 1 and ( currentVirulence * Asymptomatic_Trans ) > random 100
      and wearingMask = 0 [
    set R R + 1
    set GlobalR GlobalR + 1
  ]

  ;; symptomatic and not wearing mask
  if any? other simuls-here
      with [ color = cyan ] and color = red and Asymptomaticflag = 0 and currentVirulence > random 100
      and wearingMask = 0 [
    set R R + 1
    set GlobalR GlobalR + 1
  ]

  ;; these functions reflect thos above but allow the Reff to be measured over the course of the simulation
end


;; This code was referenced in setup, but it did not do anything since it was called at a point where agerage=95 for all agents.
to iterateAsymptomAge
  if freeWheel = false and PolicyTriggerOn = true and schoolsOpen = true [
    ;; places proportion of people under 18 into the asymptomatic category
    ask n-of ((count simuls with [ agerange < 19 ] ) * Asymptom_Prop ) simuls with [ agerange <= 18 ] [
      set asymptom random Asymptom_Prop
    ]
    ;; takes older people out of the asymptomatic category and puts them in the symptomatic
    ;; category to keep total percentages of asymptomatic cases consistent with input slider
    ask n-of ((count simuls with [ agerange < 19 ] ) * Asymptom_Prop ) simuls with [ agerange > 18 ] [
      set asymptom random (Asymptom_Prop ) + (100 - Asymptom_Prop)
    ]
  ]
end

to earn
  ;; people can earn money if they come into contact with other people who have money
  if ticks > 1 [
    if agerange < 18 [
      set reserves reserves
    ]
    if agerange >= 70 [
      set reserves reserves
    ]
    ifelse ticks > 0 and AverageFinancialContacts > 0 and color != black and any? other simuls-here
        with [ reserves > 0 ] and agerange >= 18 and agerange < 70
    [
      set reserves reserves + ((income / 365 ) / 5 * (1 / AverageFinancialContacts) - (( expenditure / 365) / 7 ) )
    ]
    [
      ;;; adjust here
      ifelse WFHCap < random WFH_Capacity and Spatial_Distance = true and AverageFinancialContacts > 0
          and color != black and any? other simuls-here with [ reserves > 0 ] and agerange >= 18 and agerange < 70
      [
        set reserves reserves + ((income / 365 ) / 5 * (1 / AverageFinancialContacts)) - (( expenditure / 365) / 7 )
      ]
      [
        set reserves reserves - (( expenditure / 365) / 7) * .5
      ]
    ]
  ]
end

to simul_setASFlag
  ;; records an asymptomatic flag for individual people
  if asymptom <= Asymptom_Prop [
    set asymptomaticFlag 1
  ]
end

to financialstress
  ;; if simuls have negative financial reserves, this identifies them in the visualisation of the model
  if reserves <= 0 and agerange > 18 and agerange < 70 [
    set shape "star"
  ]
  ;; reverts back to a dot shape if person has positive cash reserves
  if reserves > 0 [
    set shape "dot"
  ]
end


to seedCases
  ;; set up to take the pre-intervention growth pre ******August 31th ********* and use it to seed new
  ;; cases in the next week - must be updated each day 1_9_2020 =244.02*EXP(-0.09)^G55
  ;; Vic @ 90
  if ticks < seedticks and scalephase = 0 [
    ask n-of 10 simuls with [ color = cyan ] [
      set color red
      set timenow int Case_reporting_delay - 1
      set EssentialWorkerPriority random 100
      set unDetectedFlag 0
    ]
  ]
  if ticks < seedticks and scalephase = 1 [
    ask n-of 1 simuls with [ color = cyan ] [
      set color red
      set timenow int Case_reporting_delay - 1
      set EssentialWorkerPriority random 100
      set unDetectedFlag 0
    ]
  ]
  if ticks < seedticks and scalephase = 2 [
    ask n-of int .1 simuls with [ color = cyan ] [
      set color red
      set timenow int Case_reporting_delay - 1
      set EssentialWorkerPriority random 100
      set unDetectedFlag 0
    ]
  ]
end


to spend
  ifelse agerange < 18
  [
    set reserves reserves
  ]
  [
    ;; allocates cash reserves of average of 3 weeks with tails
    set reserves (income * random-normal Days_of_Cash_Reserves (Days_of_Cash_Reserves / 5) ) / 365
  ]
end


to Cruiseship
  if mouse-down? and cruise = true [
    ;; lets loose a set of new infected people into the environment
    create-simuls random 50 [
      setxy mouse-xcor mouse-ycor
      set size 2
      set shape "dot"
      set color red
      set agerange one-of [ 0 10 20 30 40 50 60 70 80 90 ]

      set health ( 100 - Agerange )
      set timenow 0
      set inQuarantine 0
      set anxiety 0
      set sensitivity random-float 1
      set R 0
      ;; resethealth resetincome calculateincomeperday calculateexpenditureperday

      set income random-exponential Mean_Individual_Income
      set ownIllnessPeriod ( exp random-normal M S ) ;; log transform of illness period
      set ownIncubationPeriod ( exp random-normal Minc Sinc ) ;;; log transform of incubation period

      set detectable random 100 ;;;; identifies whether the person is detectable or not
      set returntoschool random 100

      rngs:init ;; replacing previous log transform with beta distribution
      let stream_id random-float 999
      let seed random-float 999
      rngs:set-seed stream_id seed
      let dist rngs:rnd-beta stream_id 450.3 23.7

      set ownComplianceWithIsolation dist
      let maskWearEfficacy rngs:rnd-beta stream_id 20 11

      set ownMaskEfficacy maskWearEfficacy
    ]
  ]
end

to absorbshock
  ;; stimulus packages soak up the debt present in the simuls
  if any? simuls in-radius 1 with [ shape = "star" ] [
    set value value - sum [ reserves ] of simuls in-radius 1 with [ shape = "star" ]
  ]
end
