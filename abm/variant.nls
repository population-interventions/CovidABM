
to-report getRandomInitVariant
  report base_name
end

to-report getInitRecoverVariant
  report base_name
end

to simul_updateVariantParams
  let varData table:get variantData infectVariant
  
  let symptTime       random-gamma table:get varData "symptTimeA" table:get varData "symptTimeL"
  let symptToPeak     random-gamma table:get varData "symptToPeakA" table:get varData "symptToPeakL"
  let peakToEnd       random-gamma table:get varData "peakToEndA" table:get varData "peakToEndL"
  let nonInfectToPeak random-gamma table:get varData "nonInfectToPeakA" table:get varData "nonInfectToPeakL"
  
  set ownIllnessPeriod_raw symptTime + symptToPeak + peakToEnd
  set ownPrePeakPeriod_raw symptTime + symptToPeak

  set nonInfectivePeriod symptTime + symptToPeak - nonInfectToPeak
  set Asymptomatic_Trans table:get varData "asympt_trans"
  
  set personalVirulence rngs:rnd-beta moveInitSeedID (table:get varData "trans_a" / hetro_mult) (table:get varData "trans_b" / hetro_mult)
  ;print (word "rawBat " ownIllnessPeriod_raw ", rawIll " ownIllnessPeriod_raw ", rawV " personalVirulence)
  
  ifelse sympt_simul_presents
  [
    set symtomatic_present_day symptTime
  ]
  [
    set symtomatic_present_day -1
  ]
  
  ;; Vaccine and previous infection
  let infectivityReduction 
    (vaccine_getWanedParameter "infectReduct" infectVariant currentVaccine vaccineDay prevVaccine prevVaccineDay) * 
    (vaccine_getWanedParameter "infectReduct" infectVariant recoverVaccine recoverDay 0 0)
  
  ;; Magic triangle is now flattened only
  set ownIllnessPeriod ownIllnessPeriod_raw
  set ownPrePeakPeriod ownPrePeakPeriod_raw
  set personalVirulence personalVirulence * infectivityReduction
  
  ;print (word "Bat " ownPrePeakPeriod ", Ill " ownIllnessPeriod ", V " personalVirulence ", Red " infectivityReduction)
end

to setup_variantData
  let stream_id variantSeedID
  
  let inputFile (word input_variant)
  let variantFileData remove-item 0 csv:from-file inputFile
  file-close
  
  set variantNames []
  set variantData table:make
  let correlateAsympt table:make
  let transMeanCorrelatedDraw rngs:rnd-beta stream_id 1 1
  
  foreach variantFileData [ x ->
    let name (item 0 x)
    set variantNames lput name variantNames
    let data table:make
    
    let index 0 ;; Name is set above
    set index index + 1    let trans_min         (item index x)
    set index index + 1    let trans_max         (item index x)
    set index index + 1    let trans_std         (item index x)
    set index index + 1    let asympt_trans_mean (item index x)
    set index index + 1    let asympt_trans_std  (item index x)

    set index index + 1    let sympt_time_mean         (item index x)
    set index index + 1    let sympt_time_std          (item index x)
    set index index + 1    let sympt_to_peak_mean      (item index x)
    set index index + 1    let sympt_to_peak_std       (item index x)
    set index index + 1    let peak_to_end_mean        (item index x)
    set index index + 1    let peak_to_end_std         (item index x)
    set index index + 1    let non_infect_to_peak_mean (item index x)
    set index index + 1    let non_infect_to_peak_std  (item index x)

    set index index + 1    let hospLengthMult    (item index x)
    set index index + 1    let init_variant      (item index x)
    set index index + 1    let recoverVac        (item index x)
    set index index + 1    let correlateKey      (item index x)
    
    if trans_override > 0 [
      set trans_min trans_override 
      set trans_max trans_override
    ]
    
    let trans_mean trans_min + (trans_max - trans_min) * transMeanCorrelatedDraw
    set sen_transmissDraw_out transMeanCorrelatedDraw
    ;print (word name ", " trans_mean)
    
    ; Parameters for simulants to draw their own transmissibility
    let trans_n trans_mean * ( 1 - trans_mean ) / (trans_std ^ 2)
    table:put data "trans_a" trans_mean * trans_n
    table:put data "trans_b" (1 - trans_mean) * trans_n
    
    ;; Draw asymptomatic transmissibility factor.
    if not table:has-key? correlateAsympt correlateKey [
      let asymptValue exp (rngs:rnd-norm stream_id asympt_trans_mean asympt_trans_std)
      set sen_asymptTransmit_out asymptValue
      table:put correlateAsympt correlateKey asymptValue
    ]
    table:put data "asympt_trans" table:get correlateAsympt correlateKey ; TODO Output as sensitive f
    
    ;; illness duration parameters using gamma distributions
    table:put data "symptTimeA" sympt_time_mean * sympt_time_mean / (sympt_time_std * sympt_time_std)
    table:put data "symptTimeL" sympt_time_mean / (sympt_time_std * sympt_time_std)
    
    table:put data "symptToPeakA" sympt_to_peak_mean * sympt_to_peak_mean / (sympt_to_peak_std * sympt_to_peak_std)
    table:put data "symptToPeakL" sympt_to_peak_mean / (sympt_to_peak_std * sympt_to_peak_std)
	
    table:put data "peakToEndA" peak_to_end_mean * peak_to_end_mean / (peak_to_end_std * peak_to_end_std)
    table:put data "peakToEndL" peak_to_end_mean / (peak_to_end_std * peak_to_end_std)
	
    table:put data "nonInfectToPeakA" non_infect_to_peak_mean * non_infect_to_peak_mean / (non_infect_to_peak_std * non_infect_to_peak_std)
    table:put data "nonInfectToPeakL" non_infect_to_peak_mean / (non_infect_to_peak_std * non_infect_to_peak_std)
	
    table:put data "init_variant" init_variant
    table:put data "recoverVac" recoverVac
    table:put data "hospLengthMult" hospLengthMult
    
    table:put variantData name data
    table:put recoverCountByVariant name 0
  ]
  ;print (word "variantNames " variantNames)
  ;print (word "variantData " variantData)
end

to-report getVariantRecoverVaccine [variant]
  let data table:get variantData variant
  report (word table:get data "recoverVac" cohortVacSuffix)
end

to simul_updatepersonalvirulence
  ;; creates a triangular distribution of virulence that peaks at the end of the incubation period
  if color = red and (isInitialInfection or not first_case_calibrate) [
    (ifelse timenow <= nonInfectivePeriod 
      [
        set currentVirulence 0
      ]
      timenow < ownPrePeakPeriod
      [
        set currentVirulence personalVirulence * (((timenow - nonInfectivePeriod) / (ownPrePeakPeriod - nonInfectivePeriod) ) * (1 - prepeak_vir_boost) + prepeak_vir_boost)
      ]
      timenow < ownIllnessPeriod
      [
        set currentVirulence personalVirulence * (( ownIllnessPeriod - timenow ) / ( ownIllnessPeriod - ownPrePeakPeriod ))
      ]
      [
        set currentVirulence 0
      ]
    )
    ;print (word self ", timenow " timenow ", cur " currentVirulence ", per " personalVirulence)
  ]
    ;if vaccinated = 1 [
    ;  show (word "cine " vaccinated ",time " timenow ",VIR " (currentVirulence / personalVirulence) ",unscale " currentVirulence)
    ;]
    ;set currentVirulence 0
    ;show (word "timenow " timenow ", personalVirulence " personalVirulence ", ownPrePeakPeriod " ownPrePeakPeriod ", ownIllnessPeriod " ownIllnessPeriod)
    ;show (word "timenow " timenow ", currentVirulenceProp " (currentVirulence / personalVirulence))
end
