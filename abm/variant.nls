
to-report getRandomInitVariant
  let stream_id variantSeedID
  ; TODO, read init_prop
  report "alpha"
end

to-report getInitRecoverVariant
  ; TODO, read init_prop
  report "alpha"
end

to simul_updateVariantParams
  let varData table:get variantData infectVariant
  
  set ownIllnessPeriod_raw ( exp random-normal table:get varData "durationMean" table:get varData "durationStd" ) ;; log transform of illness period
  set ownIncubationPeriod_raw ( exp random-normal table:get varData "incubationMean" table:get varData "incubationStd" ) ;;; log transform of incubation period
  set ownIllnessPeriod ownIllnessPeriod_raw
  set ownIncubationPeriod ownIncubationPeriod_raw
  
  set nonInfectivePeriod table:get varData "non_infect_time"
  set Asymptomatic_Trans table:get varData "asympt_trans"
  
  set personalVirulence rngs:rnd-beta moveInitSeedID (table:get varData "trans_a" / hetro_mult) (table:get varData "trans_b" / hetro_mult)
  
  ;; Vaccine and previous infection
  set personalVirulence personalVirulence * (vaccine_getWanedParameter "infectReduct" infectVariant currentVaccine vaccineDay prevVaccine prevVaccineDay)
  set personalVirulence personalVirulence * (vaccine_getWanedParameter "infectReduct" infectVariant recoverVaccine recoverDay 0 0)
end

to setup_variantData
  let stream_id variantSeedID
  
  let inputFile (word input_variant)
  let variantFileData remove-item 0 csv:from-file inputFile
  
  set variantNames []
  set variantData table:make
  
  foreach variantFileData [ x ->
    let name (item 0 x)
    set variantNames lput name variantNames
    let data table:make
    
    let index 0 ;; Name is set above
    set index index + 1    let trans_mean        (item index x)
    set index index + 1    let trans_std         (item index x)
    set index index + 1    let asympt_trans_a    (item index x)
    set index index + 1    let asympt_trans_b    (item index x)
    set index index + 1    let non_infect_time   (item index x)
    set index index + 1    let incubation_mean   (item index x)
    set index index + 1    let incubation_spread (item index x)
    set index index + 1    let duration_mean     (item index x)
    set index index + 1    let duration_spread   (item index x)
    set index index + 1    let init_variant      (item index x)
    set index index + 1    let recoverVac        (item index x)
    
    ; Parameters for simulants to draw their own transmissibility
    let trans_n trans_mean * ( 1 - trans_mean ) / (trans_std ^ 2)
    table:put data "trans_a" trans_mean * trans_n
    table:put data "trans_b" (1 - trans_mean) * trans_n
    
    table:put data "asympt_trans" rngs:rnd-beta stream_id asympt_trans_a asympt_trans_b
    
    ;; illness period estimation using ln transform
    let BetaIllnessPd ln (1 + (duration_spread / duration_mean ^ 2))
    table:put data "durationMean" (ln duration_mean) - (BetaillnessPd / 2)
    table:put data "durationStd" sqrt BetaIllnessPd
    
    ;; illness period estimation using ln transform
    let BetaIncubationPd ln (1 + (incubation_spread / incubation_mean ^ 2))
    table:put data "incubationMean" (ln incubation_mean) - (BetaincubationPd / 2)
    table:put data "incubationStd" sqrt BetaIncubationPd
    
    table:put data "non_infect_time" non_infect_time
    table:put data "init_variant" init_variant
    table:put data "recoverVac" recoverVac
    
    table:put variantData name data
    table:put recoverCountByVariant name 0
  ]
  ;print (word "variantNames " variantNames)
  ;print (word "variantData " variantData)
end

to-report getVariantRecoverVaccine [variant]
  let data table:get variantData variant
  report table:get data "recoverVac"
end

to simul_updatepersonalvirulence
  ;; creates a triangular distribution of virulence that peaks at the end of the incubation period
  if color = red and (isInitialInfection or not first_case_calibrate) [
    if timenow <= nonInfectivePeriod [
      set currentVirulence 0
    ]
    ifelse ownIllnessPeriod_raw > 0
    [
      if timenow > nonInfectivePeriod and timenow <= ownIncubationPeriod [
        set currentVirulence personalVirulence * (((timenow - nonInfectivePeriod) / (ownIncubationPeriod - nonInfectivePeriod) ) * (1 - prepeak_vir_boost) + prepeak_vir_boost)
      ]
      if timenow > ownIncubationPeriod [
        set currentVirulence personalVirulence * (( ownIllnessPeriod - timenow ) / ( ownIllnessPeriod - ownIncubationPeriod ))
      ]
    ]
    [
      set currentVirulence 0
    ]
    ;if vaccinated = 1 [
    ;  show (word "cine " vaccinated ",time " timenow ",VIR " (currentVirulence / personalVirulence) ",unscale " currentVirulence)
    ;]
    ;set currentVirulence 0
    ;show (word "timenow " timenow ", personalVirulence " personalVirulence ", ownIncubationPeriod " ownIncubationPeriod ", ownIllnessPeriod " ownIllnessPeriod)
    ;show (word "timenow " timenow ", currentVirulenceProp " (currentVirulence / personalVirulence))
  ]
end
