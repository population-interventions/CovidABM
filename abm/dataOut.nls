
to setup_DataOut [maxHospTime maxIcuTime maxDeathTime]
  set cohortLengthListOfZeros n-values length table:keys popDivisionTable [0]
  set prevInfectListOfZeros n-values prevInfectTrackMax [0]
  
  set infectNoVacArray array:from-list cohortLengthListOfZeros
  set infectVacArray array:from-list cohortLengthListOfZeros
  set prevInfectionsArray array:from-list prevInfectListOfZeros
  set symptArray array:from-list cohortLengthListOfZeros
  
  set hospArray []
  repeat maxHospTime + 1 [
    set hospArray lput array:from-list cohortLengthListOfZeros hospArray
  ]
  
  set hospTimeArray []
  repeat maxHospTime + 1 [
    set hospTimeArray lput array:from-list cohortLengthListOfZeros hospTimeArray
  ]
  
  set icuArray []
  repeat maxIcuTime + 1 [
    set icuArray lput array:from-list cohortLengthListOfZeros icuArray
  ]
  
  set dieArray []
  repeat maxDeathTime + 1 [
    set dieArray lput array:from-list cohortLengthListOfZeros dieArray
  ]
  
  set age_listOut []
  let index 0
  repeat length table:keys popDivisionTable [
    let cohortData table:get popDivisionTable index
    set age_listOut lput (table:get cohortData "age") age_listOut
    set index index + 1 
  ]
  
  let extraVacData remove-item 0 csv:from-file (word input_vac_extra)
  set vaccine_listOut []
  set vaccine_outMapping table:make
  set vaccine_verboseMap table:make
  
  foreach extraVacData [ rawData ->
    set index -1
    set index index + 1    let name         (item index rawData)
    set index index + 1    let outName      (item index rawData)
    if not table:has-key? vaccine_outMapping outName [
      table:put vaccine_outMapping outName length vaccine_listOut
      set vaccine_listOut lput outName vaccine_listOut
    ]
    table:put vaccine_verboseMap name outName
  ]
  set vaccineLengthListOfZeros n-values length vaccine_listOut [0]
  set vaccineArray vaccineLengthListOfZeros
  
  if trace_calibration > 0 or success_14day_cases > 0 [
    set first_trace_day -1
    set first_trace_infections 0
    set finished_infections 0
    set finished_tracked 0
    set first_trace_occurred -1
  ]
end

to dataOut_addVaccine [vaccineType]
  set vaccineType table:get vaccine_verboseMap vaccineType
  let vacIndex table:get vaccine_outMapping vaccineType
  set vaccineArray AddToList vaccineArray vacIndex (total_population / Population)
end

to calculateDataOut
  if _init_metric_threshold < 0 [
    ;print "doDataOut"
    set infectNoVacArray_listOut lput array:to-list infectNoVacArray infectNoVacArray_listOut
    set infectVacArray_listOut lput array:to-list infectVacArray infectVacArray_listOut
    set prevInfections_listOut lput array:to-list prevInfectionsArray prevInfections_listOut
    
    set dieArray_listOut      lput (array:to-list item 0 dieArray) dieArray_listOut
    set icuArray_listOut      lput (array:to-list item 0 icuArray) icuArray_listOut
    set hospTimeArray_listOut lput (array:to-list item 0 hospTimeArray) hospTimeArray_listOut
    set hospArray_listOut     lput (array:to-list item 0 hospArray) hospArray_listOut
    set symptArray_listOut    lput array:to-list symptArray symptArray_listOut
    set vaccineArray_listOut  lput vaccineArray vaccineArray_listOut
    
    set case_listOut   lput casesReportedToday case_listOut
    set case7_listOut  lput casesinperiod7 case7_listOut
    set case14_listOut lput casesinperiod14 case14_listOut
    set case28_listOut lput casesinperiod28 case28_listOut
    set stage_listOut  lput stage stage_listOut
    
    if stage = 1 [
      set stage1time stage1time + 1
    ]
    if stage = 2 [
      set stage2time stage2time + 1
    ]
    if stage = 3 [
      set stage3time stage3time + 1
    ]
    if stage = 4 [
      set stage4time stage4time + 1
    ]
    if stage = 5 [
      set stage5time stage5time + 1
    ]
    
    if _init_metric_threshold < 0 and ticks < param_stage1_time [
      set casesinperiod7_switchTime casesinperiod7
      set cumulativeInfected_switchTime cumulativeInfected
    ]
    
    if days = mid_report_day - 1 [
      set midReport_cumulativeInfected_minusInit cumulativeInfected_minusInit
      set midReport_totalCasesReported           totalCasesReported
      set midReport_slopeAverage                 slopeAverage
      set midReport_casesinperiod7_max           casesinperiod7_max
    ]
    
    set aggOutcome_listOut lput (list
      ((sum array:to-list infectNoVacArray) + (sum array:to-list infectVacArray))
      (sum array:to-list symptArray)
      (sum (array:to-list item 0 hospArray))
      (sum (array:to-list item 0 icuArray))
      (sum (array:to-list item 0 dieArray))
     ) aggOutcome_listOut
    
    let hosp_750 0
    let hosp_1500 0
    if hospUsage >= 750 [
      set hosp_750 1
    ]
    if hospUsage >= 1500 [
      set hosp_1500 1
    ]
    set hospUsage_listOut lput (list
      hospUsage
      hosp_750
      hosp_1500
    ) hospUsage_listOut
    
    ;; Average population immunity
    let incurName (word incur_name_part_1 incur_name_part_2 incur_name_part_3)
    
    let infectReduct_vac 0
    let riskReduct_vac   0
    let reduceSympt_vac  0
    let reduceHosp_vac   0
    let reduceIcu_vac    0
    let reduceMort_vac   0
    
    let infectReduct_nat 0
    let riskReduct_nat   0
    let reduceSympt_nat  0
    let reduceHosp_nat   0
    let reduceIcu_nat    0
    let reduceMort_nat   0
    
    let infectReduct_all 0
    let riskReduct_all   0
    let reduceSympt_all  0
    let reduceHosp_all   0
    let reduceIcu_all    0
    let reduceMort_all   0
    
    let popFactor (total_population / population)
    let myMult_vac 0
    let myMult_nat 0
    
    ask simuls [
      set myMult_vac (vaccine_getWanedParameter "infectReduct" incurName currentVaccine vaccineDay prevVaccine prevVaccineDay)
      set myMult_nat (simul_getRecoverVacHistogramGeneric "infectReduct" incurName popFactor)
      set infectReduct_vac infectReduct_vac + (1 - myMult_vac)
      set infectReduct_nat infectReduct_nat + (1 - myMult_nat)
      set infectReduct_all infectReduct_all + (1 - myMult_vac * myMult_nat)
      
      set myMult_vac (vaccine_getWanedParameter "riskReduct" incurName currentVaccine vaccineDay prevVaccine prevVaccineDay)
      set myMult_nat (simul_getRecoverVacHistogramGeneric "riskReduct" incurName popFactor)
      set riskReduct_vac riskReduct_vac + (1 - myMult_vac)
      set riskReduct_nat riskReduct_nat + (1 - myMult_nat)
      set riskReduct_all riskReduct_all + (1 - myMult_vac * myMult_nat)
      
      set myMult_vac (vaccine_getWanedParameter "reduceSympt" incurName currentVaccine vaccineDay prevVaccine prevVaccineDay)
      set myMult_nat (simul_getRecoverVacHistogramGeneric "reduceSympt" incurName popFactor)
      set reduceSympt_vac reduceSympt_vac + (1 - myMult_vac)
      set reduceSympt_nat reduceSympt_nat + (1 - myMult_nat)
      set reduceSympt_all reduceSympt_all + (1 - myMult_vac * myMult_nat)
      
      set myMult_vac (vaccine_getWanedParameter "reduceHosp" incurName currentVaccine vaccineDay prevVaccine prevVaccineDay)
      set myMult_nat (simul_getRecoverVacHistogramGeneric "reduceHosp" incurName popFactor)
      set reduceHosp_vac reduceHosp_vac + (1 - myMult_vac)
      set reduceHosp_nat reduceHosp_nat + (1 - myMult_nat)
      set reduceHosp_all reduceHosp_all + (1 - myMult_vac * myMult_nat)
      
      set myMult_vac (vaccine_getWanedParameter "reduceIcu" incurName currentVaccine vaccineDay prevVaccine prevVaccineDay)
      set myMult_nat (simul_getRecoverVacHistogramGeneric "reduceIcu" incurName popFactor)
      set reduceIcu_vac reduceIcu_vac + (1 - myMult_vac)
      set reduceIcu_nat reduceIcu_nat + (1 - myMult_nat)
      set reduceIcu_all reduceIcu_all + (1 - myMult_vac * myMult_nat)
      
      set myMult_vac (vaccine_getWanedParameter "reduceMort" incurName currentVaccine vaccineDay prevVaccine prevVaccineDay)
      set myMult_nat (simul_getRecoverVacHistogramGeneric "reduceMort" incurName popFactor)
      set reduceMort_vac reduceMort_vac + (1 - myMult_vac)
      set reduceMort_nat reduceMort_nat + (1 - myMult_nat)
      set reduceMort_all reduceMort_all + (1 - myMult_vac * myMult_nat)
    ]
    
    set aveImmuneVac_listOut lput (list
      (infectReduct_vac / population)
      (riskReduct_vac   / population)
      (reduceSympt_vac  / population)
      (reduceHosp_vac   / population)
      (reduceIcu_vac    / population)
      (reduceMort_vac   / population)
    ) aveImmuneVac_listOut
    
    set aveImmuneNat_listOut lput (list
      (infectReduct_nat / population)
      (riskReduct_nat   / population)
      (reduceSympt_nat  / population)
      (reduceHosp_nat   / population)
      (reduceIcu_nat    / population)
      (reduceMort_nat   / population)
    ) aveImmuneNat_listOut
    
    set aveImmuneAll_listOut lput (list
      (infectReduct_all / population)
      (riskReduct_all   / population)
      (reduceSympt_all  / population)
      (reduceHosp_all   / population)
      (reduceIcu_all    / population)
      (reduceMort_all   / population)
    ) aveImmuneAll_listOut
  ]
  
  set infectNoVacArray array:from-list cohortLengthListOfZeros
  set infectVacArray array:from-list cohortLengthListOfZeros
  set prevInfectionsArray array:from-list prevInfectListOfZeros
  set symptArray array:from-list cohortLengthListOfZeros
  set vaccineArray vaccineLengthListOfZeros
  
  set hospArray     lput array:from-list cohortLengthListOfZeros (but-first hospArray)
  set hospTimeArray lput array:from-list cohortLengthListOfZeros (but-first hospTimeArray)
  set icuArray      lput array:from-list cohortLengthListOfZeros (but-first icuArray)
  set dieArray      lput array:from-list cohortLengthListOfZeros (but-first dieArray)
  
  ;let i 0
  ;foreach hospArray [ x ->
  ;  print (sum array:to-list x) - item i hospTodayPipe
  ;  set i i + 1
  ;]
end

to checkCalibrationStop
  if trace_calibration > 0 [
    if first_trace_day = -1 and casesinperiod7 > 0 [
      set first_trace_day ticks
      set first_trace_infections currentInfections
    ]
    
    if currentInfections = 0 or trace_calibration < cumulativeInfected [
      set pre_stop_day ticks
      set tracked_simuls (count simuls with [color = red and tracked = 1] * extraScaleFactor * scale_factor ^ scalePhase)
      ;print (list "End_Day" End_Day)
      ;print (list "first_trace_day" first_trace_day)
      ;print (list "first_trace_infections" first_trace_infections)
      ;print (list "currentInfections" currentInfections)
      ;print (list "cumulativeInfected" cumulativeInfected)
      ;print (list "tracked_simuls" tracked_simuls)
      ;print (list "finished_infections" finished_infections)
      ;print (list "finished_tracked" finished_tracked)
      ;print (list "cali_timenow" cali_timenow)
      ;print (list "cali_asymptomaticFlag" cali_asymptomaticFlag)
      ;print (list "cali_symtomatic_present_day" cali_symtomatic_present_day)
      set stop_simulation true
    ]
  ]
  
  if success_14day_cases > -1 [
    if casesinperiod14 / 14 < success_14day_cases [
      set pre_stop_day ticks
      set tracked_simuls (count simuls with [color = red and tracked = 1] * extraScaleFactor * scale_factor ^ scalePhase)
      set stop_simulation true
    ]
  ]
end
