;;*******************************************************************************************************************************
;;** Counting things, often with scale involved **
;;*******************************************************************************************************************************

to setupPipes
  let pipeZeros n-values 40 [0]
  
  set deathTodayPipe pipeZeros
  set hospTodayPipe  pipeZeros
  set hospUsagePipe  pipeZeros
end

to updatePipes
  set deathCount (item 0 deathTodayPipe)
  set hospToday  (item 0 hospTodayPipe)
  set hospUsage  (item 0 hospUsagePipe)
  
  set deathTodayPipe lput 0 (but-first deathTodayPipe)
  set hospTodayPipe  lput 0 (but-first hospTodayPipe)
  set hospUsagePipe  lput 0 (but-first hospUsagePipe)
end

to simul_AddDeathHospToPipes [hasHosp popPerSimul varHospLengthMult deathMean]
  set deathTodayPipe AddToList deathTodayPipe (cohortHospTime - timenow) deathMean
  
  if hasHosp [
    set hospTodayPipe AddToList hospTodayPipe (cohortHospTime - timenow) popPerSimul
    let i 0
    let hospLength floor (varHospLengthMult * cohortHospLengthBase + 0.5 * rngs:rnd-beta defaultStream 1 1)
    repeat hospLength [
      if cohortHospTime - timenow + i >= 0 [
        set hospUsagePipe AddToList hospUsagePipe (cohortHospTime - timenow + 1) popPerSimul
      ]
      set i i + 1 
    ]
  ]
end

to printVaccineProgress
  ;let doubleDoseAdult count simuls with [ doseCount >= 2 and agerange > 15 ]
  ;let doubleDose16_17 count simuls with [ doseCount >= 2 and agerange = 15 ]
  ;let popAtLeast16 (count simuls with [ agerange > 15 ]) + (count simuls with [ agerange = 15 ]) / 4
  ;print (word "Day: " ticks ", Vaccine 16+: " ((round (((doubleDoseAdult + doubleDose16_17) / popAtLeast16) * 1000)) / 10))
end

to updateCounts
  ;; Cache number of infected (red) suceptible (blue (actually cyan)) and recovered (yellow) agents
  set redCount count simuls with [ color = red ]
  set yellowcount count simuls with [ color = yellow ]

  set infectionsYesterday infectionsToday
  ;; this considers ALL cases - not just the reported ones
  set infectionsToday infectionsToday_acc
  if infectionsYesterday != 0 [
    set InfectionChange ( infectionsToday / infectionsYesterday )
  ]
  
  ;let casesToday count simuls with [ color = red and tracked = 1 and caseReportTime = ticks ]
  set casesReportedToday casesReportedToday_acc
  updatePipes
  
  ;; calculates the number of infected people in the population
  let redLower simuls with [color = red and myScale = scalePhase]
  let redUpper simuls with [color = red and myScale > scalePhase]
  
  let redLowerNoInit simuls with [color = red and myScale = scalePhase and timenow <= ticks ]
  let redUpperNoInit simuls with [color = red and myScale > scalePhase and timenow <= ticks ]
  ifelse scalephase < scalePhaseMax 
  [
    set currentInfections (count redLower + count redUpper * Scale_Factor) * (Scale_Factor ^ scalephase)
    set currentInfections_minusInit (count redLowerNoInit + count redUpperNoInit * Scale_Factor) * (Scale_Factor ^ scalephase) 
  ]
  [
    set currentInfections (count redLower) * (Scale_Factor ^ scalephase) + (count redUpper) * (Scale_Factor ^ (scalephase + scalePhaseExtra))
    set currentInfections_minusInit (count redLowerNoInit) * (Scale_Factor ^ scalephase) + (count redUpperNoInit) * (Scale_Factor ^ (scalephase + scalePhaseExtra))
  ]
  
  ;; calculates the scaled population for working with smaller environments
  ifelse (scalephase = 0 and redUpper = 0) or redCount = 0
  [
    set scaledPopulation Population
  ]
  [
    set scaledPopulation Population * currentInfections / redCount
  ]
  set globalPopPerSimul scaledPopulation / Population

  ;; calculates the number of people infected and recorded today
  if start_metric_threshold < 0 [
    set cumulativeInfected cumulativeInfected + infectionsToday
    set cumulativeInfected_minusInit cumulativeInfected - initial_cases
    set totalCasesReported totalCasesReported + casesReportedToday
    set totalHosp totalHosp + hospToday
  ]
    
  ;; calculates death rate per infected person over the course of the pandemic
  if Deathcount > 0 and cumulativeInfected > 0 [
    set casefatalityrate ( Deathcount / cumulativeInfected )
  ]
  
  if print_vac [
    printVaccineProgress
  ]
end

to resetAccumulators
  ifelse transmission_count > 0
  [
    set transmission_average transmission_sum / transmission_count
  ]
  [
    set transmission_average 0
  ]
  set transmission_count_metric transmission_count
  set transmission_count 0
  set transmission_sum 0
  
  set infectionsToday_acc 0
  set casesReportedToday_acc 0
  
  set new_case_real new_case_real_counter
  set new_case_real_counter 0
  
  let totalEndR_all_regions 0
  let totalEndCount_all_regions 0
  foreach regionTable_list [ region ->
    if table:get endR_count region > 0 [
      table:put endR_mean_metric region table:get endR_sum region / table:get endR_count region
      table:put endR_sum region 0
      table:put endR_count region 0
    ]
  
    ifelse table:get totalEndCount region > 0
    [
      table:put average_R region table:get totalEndR region / table:get totalEndCount region
      set totalEndR_all_regions totalEndR_all_regions + (table:get totalEndR region)
      set totalEndCount_all_regions totalEndCount_all_regions + (table:get totalEndCount region)
    ]
    [
      table:put average_R region 0
    ]
  ]
  
  ifelse totalEndCount_all_regions > 0
  [
    set average_R_all_regions totalEndR_all_regions / totalEndCount_all_regions
  ]
  [
    set average_R_all_regions 0
  ]
  
  set average_R_region_1 table:get average_R 1
  
  ;show ( word " avoidFails " (avoidAttempts - avoidSuccess) ", avoidSuccess " avoidSuccess)
  ;set avoidSuccess 0
  ;set avoidAttempts 0
  
  ;print "moveCount"
  ;print moveCount
  ;print foundUseCount
  ;set moveCount 0
  ;set foundUseCount 0
end

to outputLockdownCalibrate
  set slope_prior6 slope_prior5
  set slope_prior5 slope_prior4
  set slope_prior4 slope_prior3
  set slope_prior3 slope_prior2
  set slope_prior2 slope_prior1
  set slope_prior1 slope_prior0
  set slope_prior0 (casesinperiod7) / 7
  
  if slope_track_end > 0 and casesinperiod7 / 7 > slope_track_end [
   set stop_simulation true 
  ]
  
  if start_metric_threshold < 0 and slope_track_start > ticks - start_day and (slope_prior0 > 0 and slope_prior1 > 0 and 
      slope_prior2 > 0 and slope_prior3 > 0 and slope_prior4 > 0 and slope_prior5 > 0 and slope_prior6 > 0)  [
    ;show ( word "4: " slope_prior4 ", 3: " slope_prior3 ", 2: " slope_prior2 ", 1: " slope_prior1 ", 0: " slope_prior0 )
    let linearRegress matrix:forecast-linear-growth ( list ln(slope_prior6) ln(slope_prior5) ln(slope_prior4) ln(slope_prior3) ln(slope_prior2) ln(slope_prior1) ln(slope_prior0) )
    set slope exp(item 2 linearRegress) - 1
    
    set slopeCount slopeCount + 1
    set slopeSum slopeSum + slope
    set slopeAverage slopeSum / slopeCount
    ;show ( word (ticks - decisionDate) ", average: " slopeAverage ", " slope )
    
    
    set trackCount trackCount + 1
    set trackSum trackSum + track_and_trace_efficiency
    set trackAverage trackSum / trackCount
    
    if redCount > 0 [
      set infectedTrackCount infectedTrackCount + 1
      set infectedTrackSum infectedTrackSum + ((count simuls with [color = red and tracked = 1]) / redCount)
      set infectedTrackAverage infectedTrackSum / infectedTrackCount
    ]
  ]
end

to calculateHospInLastPeriod
  if ticks < IGNORE_CASE_UNTIL [
    set hospToday preSimDailyHosp
  ]
  
  set h_prior23 h_prior22
  set h_prior22 h_prior21
  set h_prior21 h_prior20
  set h_prior20 h_prior19
  set h_prior19 h_prior18
  set h_prior18 h_prior17
  set h_prior17 h_prior16
  set h_prior16 h_prior15
  set h_prior15 h_prior14
  set h_prior14 h_prior13
  set h_prior13 h_prior12
  set h_prior12 h_prior11
  set h_prior11 h_prior10
  set h_prior10 h_prior9
  set h_prior9 h_prior8
  set h_prior8 h_prior7
  set h_prior7 h_prior6
  set h_prior6 h_prior5
  set h_prior5 h_prior4
  set h_prior4 h_prior3
  set h_prior3 h_prior2
  set h_prior2 h_prior1
  set h_prior1 h_prior0
  set h_prior0 hospToday

  set hospinperiod7 h_prior10 + h_prior11 + h_prior12 + h_prior13
  set hospinperiod7 hospinperiod7 + h_prior14 + h_prior15 + h_prior16
  
  set policymetric14 hospinperiod7 + h_prior17 + h_prior18 + h_prior19
  set policymetric14 policymetric14 + h_prior20 + h_prior21 + h_prior22 + h_prior23
  
  if policyUseHosp [
   set policymetric7 hospinperiod7
   set policymetric14 hospinperiod14
  ]
end

to calculateCasesInLastPeriod
  ;; counts cases in the last 7/14/28 days -
  ;; THIS ONLY COUNTS DETECTED CASES, NOT ALL INFECTIONS - TO ADJUST YOU MUST SET ASYMPTOMATIC TO ZERO
  
  if ticks < IGNORE_CASE_UNTIL [
    set casesReportedToday preSimDailyCases
  ]
  
  set prior27 prior26
  set prior26 prior25
  set prior25 prior24
  set prior24 prior23
  set prior23 prior22
  set prior22 prior21
  set prior21 prior20
  set prior20 prior19
  set prior19 prior18
  set prior18 prior17
  set prior17 prior16
  set prior16 prior15
  set prior15 prior14
  set prior14 prior13
  set prior13 prior12
  set prior12 prior11
  set prior11 prior10
  set prior10 prior9
  set prior9 prior8
  set prior8 prior7
  set prior7 prior6
  set prior6 prior5
  set prior5 prior4
  set prior4 prior3
  set prior3 prior2
  set prior2 prior1
  set prior1 prior0
  set prior0 casesReportedToday
  
  set casesinperiod7 prior0 + prior1 + prior2 + prior3
  set casesinperiod7 casesinperiod7 + prior4 + prior5 + prior6
  
  set casesinperiod14 casesinperiod7 + prior7 + prior8 + prior9
  set casesinperiod14 casesinperiod14 + prior10 + prior11 + prior12 + prior13

  set casesinperiod28 casesinperiod14 + prior14 + prior15 + prior16 + prior17
  set casesinperiod28 casesinperiod28 + prior18 + prior19 + prior20 + prior21 + prior22
  set casesinperiod28 casesinperiod28 + prior23 + prior24 + prior25 + prior26 + prior27
  
  set real_prior6 real_prior5
  set real_prior5 real_prior4
  set real_prior4 real_prior3
  set real_prior3 real_prior2
  set real_prior2 real_prior1
  set real_prior1 real_prior0
  set real_prior0 infectionsToday
  
  set infectionsinperiod7 real_prior0 + real_prior1 + real_prior2 + real_prior3
  set infectionsinperiod7 infectionsinperiod7 + real_prior4 + real_prior5 + real_prior6
  
  if track_slope [
    ;; Do not run this unless you need to, is probably slow.
    outputLockdownCalibrate
  ]
  
  if casesReportedToday > casesReportedToday_max [
   set casesReportedToday_max casesReportedToday
  ]
  if casesinperiod7 > casesinperiod7_max [
   set casesinperiod7_max casesinperiod7
  ]
  
  if casesReportedToday_min = -1 or casesReportedToday < casesReportedToday_min [
   set casesReportedToday_min casesReportedToday
  ]
  if casesinperiod7_min = -1 or casesinperiod7 < casesinperiod7_min [
   set casesinperiod7_min casesinperiod7
  ]
  
  if not policyUseHosp [
   set policymetric7 casesinperiod7
   set policymetric14 casesinperiod14
  ]
end

to checkStartThreshold
  if start_metric_threshold > -1 [
    let compareNumber casesinperiod7 / 7
    if realNotCaseThres [
      set compareNumber infectionsinperiod7 / 7
    ]
    set start_day ticks
    if compareNumber > start_metric_threshold [
      set start_metric_threshold -1
      ;print (word "start_day " start_day ", cases " (casesinperiod7 / 7))
    ]
  ]
end
