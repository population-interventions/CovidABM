
to-report LnOddsToPr [lnOdd]
  let odds exp lnOdd
  report odds / (1 + odds)
end

to-report PrToLnOdds [pr]
  report ln (pr / (1 - pr))
end

to-report LnOddsToOdds [lnOdd]
  report exp lnOdd
end

to-report OddsToLnOdds [odds]
  report ln odds
end


to-report OddsToPr [odds]
  report odds / (1 + odds)
end

to-report PrToOdds [pr]
  report pr / (1 - pr)
end

to-report AddLogOdds [prob toAdd]
  let odds exp ((ln (prob / ( 1 - prob))) + toAdd)
  report odds / (odds + 1)
end

to-report ApplyOrToPr [prob oddsRatio]
  report OddsToPr (oddsRatio * PrToOdds prob)
end

to-report AddToList [myList myIndex myValue]
  if myIndex < 0 [
    report myList 
  ]
  report (replace-item myIndex myList (myValue + item myIndex myList))
end

to-report MeanStdToBeta [meanVal stdVal]
  let nFactor meanVal * (1 - meanVal) / (stdVal * stdVal)
  report (list (meanVal * nFactor) ((1 - meanVal) * nFactor))
end

to-report LoadCsvListListToTableTable [listList]
  let outTable table:make
  let colNames remove-item 0 item 0 listList
  
  foreach colNames [ x ->
    table:put outTable x table:make
  ]
  
  foreach remove-item 0 listList [ x ->
    let i 0
    let row item 0 x
    foreach remove-item 0 x [ y ->
      let col item i colNames
      table:put (table:get outTable col) row y
      set i i + 1
    ]
  ]
  
  report outTable
end