
to ShiftRecoveredTowardsTotalProportion
  if Recovered_Match_Rate > 0 [
    set recoverProportion recoverCount / (total_population - deathCount)
    let repYellowCount ceiling (Population * recoverProportion)
    let yellowSet simuls with [ color = yellow ]
    let yellowSetCount count yellowSet
    if repYellowCount < yellowSetCount [
      let wantAsk (Recovered_Match_Rate * (yellowSetCount - repYellowCount) + random-float 1)
      if wantAsk > count yellowSet [
        set wantAsk count yellowSet 
      ]
      ask n-of wantAsk yellowSet [
        set color cyan
        set recoverTime 0
        set recoveryVariant 0
      ]
    ]
    if repYellowCount > yellowSetCount [
      let wantAsk (Recovered_Match_Rate * (repYellowCount - yellowSetCount) + random-float 1)
      let cyanSet simuls with [ color = cyan ]
      if wantAsk > count cyanSet [
        set wantAsk count cyanSet 
      ]
      ask n-of wantAsk cyanSet [
        simul_setNewRecover
        set recoveryVariant 1 ;; TODO this number should not always be 1 if this code is to be used.
        set isolating 0
      ]
    ]
  ]
  
  if Recov_Var_Match_Rate > 0 and recoverCount > 0 [
    let yellowSet simuls with [ color = yellow ]
    let variantKeys table:keys recoverCountByVariant
    let yellowSetCount count yellowSet
    
    ;; recoverCount may not necessarily be equal to the sum of recoverCountByVariant
    let totalRecoverByVariant 0
    foreach variantKeys [ variant ->
      set totalRecoverByVariant totalRecoverByVariant + table:get recoverCountByVariant variant
    ]
    
    ;; Cache some simulant counts
    let variantSet table:make
    let variantPropDiff table:make
    
    ;; Determine which variant is the most below the desired proportion.
    let wantMostVariant 0
    let wantMostProp 0
    if yellowSetCount > 0 [
      foreach variantKeys [ variant ->
        let myYellow yellowSet with [recoveryVariant = variant]
        let myProp (count myYellow) / yellowSetCount
        let desiredProp (table:get recoverCountByVariant variant) / totalRecoverByVariant
        if desiredProp > myProp [
          if desiredProp - myProp > wantMostProp [
            set wantMostProp desiredProp - myProp
            set wantMostVariant variant
          ]
        ]
        if desiredProp < myProp [
          table:put variantSet variant myYellow
          table:put variantPropDiff variant (myProp - desiredProp)
        ]
      ]
      
      ;; Each variant that is above its desired proportion transfers some of its share to the
      ;; variant that has the largest shortfall.
      foreach table:keys variantPropDiff [ variant ->
        ask n-of ((table:get variantPropDiff variant) * Recov_Var_Match_Rate * yellowSetCount) table:get variantSet variant [
          set recoveryVariant wantMostVariant
        ]
      ]
    ]
  ]
  
  set recoverCount recoverCount * dailyRecoverMult
end

to scale_setup
  set scalePhaseMax (Log (total_population / population) Scale_Factor)
  set scalePhaseExtra scalePhaseMax - floor scalePhaseMax
  set scalePhaseMax floor scalePhaseMax
  ;print total_population
  ;print population
  ;print Scale_Factor
  ;print scalePhaseMax
end

to-report GetUninfectedOfCohort [index wantedVaccine wantedHomeRegion]
  let cohortSimuls (table:get populationCohortCache index) with [color != red]
  let matchDose cohortSimuls with [currentVaccine = wantedVaccine]
  ifelse any? matchDose
  [
    report matchDose
  ]
  [
    let succSimuls simuls with [color != red]
    let regionSimuls succSimuls with [homeRegion = wantedHomeRegion]
    set matchDose regionSimuls with [currentVaccine = wantedVaccine]
    ifelse any? matchDose
    [
      report matchDose
    ]
    [
      set matchDose succSimuls with [currentVaccine = wantedVaccine]
      ifelse any? matchDose
      [
        report matchDose
      ]
      [
        report succSimuls
      ]
    ]
  ]
end

to-report GetInitialScale [cases]
  if cases = 0 [
   report 0 
  ]
  let caseScale floor log cases Scale_Factor
  let scaleRangeInThreshold floor log Scale_Up_Threshold Scale_Factor
  if caseScale - scaleRangeInThreshold > 0 [
    report caseScale - scaleRangeInThreshold 
  ]
  report 0
end

;;*******************************************************************************************************************************
;;** Scale Modification **
;;*******************************************************************************************************************************

to do_scaleup
  let toScale redCount - Scale_Up_Threshold
  
  if toScale > 0 [
    set toScale toScale + scale_cont_buffer
    
    let redLower simuls with [color = red and myScale = scalePhase]
    let redUpper simuls with [color = red and myScale > scalePhase]
    
    ;print (word "Scale Up: " scalePhase ", Lower: " (count redLower) ", Upper: " (count redUpper) ", Max: " scalePhaseMax)
    
    let scaleExp 1
    if scalePhase >= scalePhaseMax [
      set scaleExp scalePhaseExtra
    ]
    
    let increaseNext 0
    ask redLower [
      ifelse increaseNext > 0
      [
        set myScale myScale + scaleExp
        set increaseNext increaseNext - 1
      ]
      [
        if toScale > 0 [
          simul_do_scaleup
          set increaseNext increaseNext + 1 / (Scale_Factor ^ scaleExp - 1)
          set toScale toScale - 1 
        ]
      ]
    ]
    
    if (toScale > 0 or increaseNext > 0) and scalePhase < scalePhaseMax [
      set scalePhase scalePhase + 1
      if scalePhase >= scalePhaseMax [
        set scaleExp scalePhaseExtra
      ]
      
      ask redUpper [
        ifelse increaseNext > 0
        [
          set myScale myScale + scaleExp
          set increaseNext increaseNext - 1
        ]
        [
          if toScale > 0 [
            simul_do_scaleup
            set increaseNext increaseNext + 1 / (Scale_Factor ^ scaleExp - 1)
            set toScale toScale - 1 
          ]
        ]
      ]
    ]
  ]
end

to do_scaledown
  let toScale Scale_Down_Threshold - redCount
  
  if toScale > 0 [
    set toScale toScale + scale_cont_buffer
    if toScale < scale_cont_buffer [
      set toScale scale_cont_buffer
    ]
    
    let redLower simuls with [color = red and myScale = scalePhase]
    let redUpper simuls with [color = red and myScale > scalePhase]
    
    ;print (word "Scale Down: " scalePhase ", Lower: " (count redLower) ", Upper: " (count redUpper))
    
    let my_timenow                  0
    let my_caseReportTime           0
    let my_tracked                  0
    let my_R                        0
    let my_infectVariant            0
    let my_variantTransMult         0
    let my_contributeToR            0
    let my_vaccineIncursionOverride 0
    let my_hasKnownContact          0
    let my_traceAttempts            0
    let my_selfTraceEffMult         0
    let my_myScale                  0
    let my_recoverTime              0
    
    let thisSimul 0
    let otherSimul 0
    
    ask redUpper [
      if toScale > 0 [
        set my_timenow                  timenow
        set my_caseReportTime           caseReportTime
        set my_tracked                  tracked
        set my_R                        R
        set my_infectVariant            infectVariant
        set my_contributeToR            contributeToR
        set my_hasKnownContact          hasKnownContact
        set my_traceAttempts            traceAttempts
        set my_selfTraceEffMult         selfTraceEffMult
        set my_recoverTime              recoverTime
        
        let toAsk Scale_Factor ^ (myScale - scalePhase) - 1 + random-float 1
        set toScale toScale - 1 
        set my_myScale scalePhase
    
        set thisSimul self
        
        if toAsk > random-float 1 [
          ask n-of 1 (GetUninfectedOfCohort cohortIndex currentVaccine homeRegion) [
            set color red
            set timenow                  my_timenow
            set caseReportTime           my_caseReportTime
            set tracked                  my_tracked
            set R                        my_R
            set infectVariant            my_infectVariant
            set contributeToR            my_contributeToR
            set hasKnownContact          my_hasKnownContact
            set traceAttempts            my_traceAttempts
            set selfTraceEffMult         my_selfTraceEffMult
            set myScale                  my_myScale
            set recoverTime              my_recoverTime
            
            table:put infectedContactList table:length infectedContactList thisSimul
            set otherSimul self
          ]
          table:put infectedContactList table:length infectedContactList otherSimul
        ]
        
        set myScale my_myScale
        set toScale toScale - 1 
      ]
    ]
    
    if toScale > 0 and scalePhase > 0 [
      set scalePhase scalePhase - 1
      
      ask redLower [
        if toScale > 0 [
          set my_timenow                  timenow
          set my_caseReportTime           caseReportTime
          set my_tracked                  tracked
          set my_R                        R
          set my_infectVariant            infectVariant
          set my_contributeToR            contributeToR
          set my_hasKnownContact          hasKnownContact
          set my_traceAttempts            traceAttempts
          set my_selfTraceEffMult         selfTraceEffMult
          
          let toAsk Scale_Factor ^ (myScale - scalePhase) - 1
          set toScale toScale - 1 
          set my_myScale scalePhase
          
          set thisSimul self
          
          if toAsk > random-float 1 [
            ask n-of 1 (GetUninfectedOfCohort cohortIndex currentVaccine homeRegion) [
              set color red
              set timenow                  my_timenow
              set caseReportTime           my_caseReportTime
              set tracked                  my_tracked
              set R                        my_R
              set infectVariant            my_infectVariant
              set contributeToR            my_contributeToR
              set hasKnownContact          my_hasKnownContact
              set traceAttempts            my_traceAttempts
              set selfTraceEffMult         my_selfTraceEffMult
              set myScale                  my_myScale
              
              table:put infectedContactList table:length infectedContactList thisSimul
              set otherSimul self
            ]
            table:put infectedContactList table:length infectedContactList otherSimul
          ]
          
          set myScale my_myScale
        ]
      ]
    ]
  ]
end

to CheckScale
  ;; this function scales up the simulation at base Scale_Factor to enable a small and large-scale understanding of dynamics.
  ;; It enables the fine-grained analysis in early stages that more closely resembles diffusion across a population similar to
  ;; assumptions in SEIR models but as it scales up, recognises that there are geographic constraints of movement of populations
  
  do_scaleup
  do_scaledown
end
