;;
;; Setup and functions particular to setup that don't have anywhere else to live.
;;

to setEssentialWorkerPriority
  ifelse isWorker 
  [
    ifelse essentialJob
    [
      set EssentialWorkerPriority round (random-float essentialWorkerRange)
    ]
    [
      set EssentialWorkerPriority round (essentialWorkerRange + random-float otherWorkerRange)
    ]
  ]
  [
    set EssentialWorkerPriority 2 ;; People who don't work are never essential workers.
  ]
end

to loadPopDivisionTable
  let fileName params_getPopTable
  let populationFileData remove-item 0 csv:from-file fileName
  file-close
  set popDivisionTable table:make
  let i 0
  foreach populationFileData [ x -> 
    let cohortData table:make
    let index -1
    set index index + 1    table:put cohortData "pop" item index x
    set index index + 1    table:put cohortData "age" item index x
    set index index + 1    table:put cohortData "preGroup" item index x
    set index index + 1    table:put cohortData "essentialCount" item index x
    set index index + 1    table:put cohortData "workerCount" item index x
    set index index + 1    table:put cohortData "studentCount" item index x
    set index index + 1    table:put cohortData "spanMult" item index x
    set index index + 1    table:put cohortData "avoidOr" item index x
    set index index + 1    table:put cohortData "gatherFreqMult" item index x
    set index index + 1    table:put cohortData "region" item index x
    set index index + 1    table:put cohortData "succeptOr" item index x
    set index index + 1    table:put cohortData "uptakeFromDose2" item index x
    set index index + 1    table:put cohortData "vaccineUptake" item index x
    set index index + 1    table:put cohortData "vaccineBranch" item index x
    set index index + 1    table:put cohortData "branchFrom2" item index x
    set index index + 1    table:put cohortData "vaccineSuffix" item index x
    set index index + 1    table:put cohortData "hospDay" item index x
    set index index + 1    table:put cohortData "icuDay" item index x
    set index index + 1    table:put cohortData "deathDay" item index x
    set index index + 1    table:put cohortData "hospLengthBase" item index x
    set index index + 1    table:put cohortData "recover_noVac" item index x
    set index index + 1    table:put cohortData "recover_dose2" item index x
    set index index + 1    table:put cohortData "recover_dose3" item index x
    set index index + 1    table:put cohortData "recoverMaxDay" item index x
    set index index + 1    table:put cohortData "doseCount_2" item index x
    set index index + 1    table:put cohortData "doseDays_2" item index x
    set index index + 1    table:put cohortData "doseName_2" item index x
    set index index + 1    table:put cohortData "doseCount_3" item index x
    set index index + 1    table:put cohortData "doseDays_3" item index x
    set index index + 1    table:put cohortData "doseName_3" item index x
    
    table:put cohortData "succeptOr" ((table:get cohortData "succeptOr") * random-normal 1 0.15)
    table:put popDivisionTable i cohortData
    set i i + 1
  ]
end

to loadRegionTable
  let regionFileData remove-item 0 csv:from-file input_region
  file-close
  set regionTable table:make
  set regionTable_keys []
  set regionTable_list []
  let i 0
  foreach regionFileData [ x -> 
    let region (item 0 x)
    table:put regionTable i x
    set regionTable_keys lput i regionTable_keys
    
    set regionTable_list lput region regionTable_list
    table:put endR_count region 0
    table:put endR_mean_metric region 0
    table:put endR_sum region 0
    table:put totalEndCount region 0
    table:put totalEndR region 0
    table:put average_R region 0
    
    set i i + 1
  ]
end


to processPopulationData
  let regionPopulation table:make
  
  set totalWorkers 0
  set totalEssentialWorkers 0
  foreach table:keys popDivisionTable [ index -> 
    let data table:get popDivisionTable index
    set totalWorkers totalWorkers + table:get data "workerCount"
    set totalEssentialWorkers totalEssentialWorkers + table:get data "essentialCount"
    let region table:get data "region"
    let pop table:get data "pop"
    if not table:has-key? regionPopulation region [
      table:put regionPopulation region 0
    ]
    table:put regionPopulation region ((table:get regionPopulation region) + pop)
  ]
  
  set essentialWorkerRange totalEssentialWorkers / totalWorkers
  set otherWorkerRange (totalWorkers - totalEssentialWorkers) / totalWorkers
  
  ;; Set the house index range used by each region
  set regionHouseMin table:make
  set regionHouseMax table:make
  set regionPosMin table:make
  set regionPosMax table:make
  
  let regionTableData table:values regionTable
  let curHouseIndex 0
  foreach regionTableData [ data -> 
    let region item 0 data
    ;; Houses in the region is population / house size
    let houses ceiling ((table:get regionPopulation region) / (item 3 data))
    table:put regionHouseMin region curHouseIndex
    table:put regionHouseMax region curHouseIndex + houses
    set curHouseIndex curHouseIndex + houses
    table:put regionPosMin region (item 1 data) * world-height
    table:put regionPosMax region (item 2 data) * world-height
  ]
end

to createSimulants
  let pop_index 0
  let agentsOfThisIndex 0
  let oldCohortIndex -1
  
  let cohort_pop 0
  let cohort_age 0
  let cohort_preGroup 0
  let cohort_essentialCount 0
  let cohort_workerCount 0
  let cohort_studentCount 0
  let cohort_spanMult 0
  let cohort_avoidOr 0
  let cohort_gatherFreqMult 0
  let cohort_region 0
  let cohort_succeptOr 0
  let cohort_uptakeFromDose2 0
  let cohort_vaccineUptake 0
  let cohort_vaccineBranch 0
  let cohort_branchFrom2 0
  let cohort_vaccineSuffix ""
  let cohort_hospTime 0
  let cohort_icuTime 0
  let cohort_deathTime 0
  let cohort_hospLengthBase 0
  
  let maxHospTime  0
  let maxIcuTime   0
  let maxDeathTime 0
  
  ;; set up people in the environment and allocates characteristics to them
  ask n-of (Population) patches with [ pcolor = black ] [
    
    if oldCohortIndex != pop_index [
      ; Iterate over cohort data to get each set of simul parameters.
      if not table:has-key? popDivisionTable pop_index [
        print "totalAgents in population.csv sums to less than Population (2500)." 
      ]
      let cohortData             table:get popDivisionTable pop_index
      set cohort_pop             table:get cohortData "pop"
      set cohort_age             table:get cohortData "age"
      set cohort_preGroup        table:get cohortData "preGroup"
      set cohort_essentialCount  table:get cohortData "essentialCount"
      set cohort_workerCount     table:get cohortData "workerCount"
      set cohort_studentCount    table:get cohortData "studentCount"
      set cohort_spanMult        table:get cohortData "spanMult"
      set cohort_avoidOr         table:get cohortData "avoidOr"
      set cohort_gatherFreqMult  table:get cohortData "gatherFreqMult"
      set cohort_region          table:get cohortData "region"
      set cohort_succeptOr       table:get cohortData "succeptOr"
      set cohort_uptakeFromDose2 table:get cohortData "uptakeFromDose2"
      set cohort_vaccineUptake   table:get cohortData "vaccineUptake"
      set cohort_vaccineBranch   table:get cohortData "vaccineBranch"
      set cohort_branchFrom2     table:get cohortData "branchFrom2"
      set cohort_vaccineSuffix   table:get cohortData "vaccineSuffix"
      set cohort_hospTime        table:get cohortData "hospDay"
      set cohort_icuTime         table:get cohortData "icuDay"
      set cohort_deathTime       table:get cohortData "deathDay"
      set cohort_hospLengthBase  table:get cohortData "hospLengthBase"
      
      ;print (word "cohort_wane_1: " cohort_wane_1 ", cohort_wane_2: " cohort_wane_2 ", cohort_wane_3: " cohort_wane_3)
      set oldCohortIndex pop_index
      
      if maxHospTime < cohort_hospTime [
        set maxHospTime cohort_hospTime
      ]
      if maxIcuTime < cohort_icuTime [
        set maxIcuTime cohort_icuTime
      ]
      if maxDeathTime < cohort_deathTime [
        set maxDeathTime cohort_deathTime
      ]
    ]
    set agentsOfThisIndex agentsOfThisIndex + 1
    
    sprout-simuls 1 [
      set size 2
      set shape "dot"
      set color cyan
      set householdUnit random 1000
      set tracked 0
      set knownContactTime -1
      set timenow 0
      set noticeOwnInfection 0
      set R 0
      set isolating 0
      set hasNewHouse false
      set update_lock false
      set isInitialInfection false
      set BeAvoided true
      
      set selfTraceEffMult 1
      set traceAttempts 0
      set caseReportTime 0
      
      set infectedContactList table:make
      set hasKnownContact false
      
      set move_chance_multiplier 2 * rngs:rnd-beta moveInitSeedID (10 / hetro_mult) (10 / hetro_mult)
      set visit_chance_multiplier 5 * rngs:rnd-beta moveInitSeedID (1 / hetro_mult) (4 / hetro_mult)
      set superSpread_chance_multiplier 6 * rngs:rnd-beta moveInitSeedID (0.6 / hetro_mult) (3 / hetro_mult)

      set cohortIndex pop_index
      set agerange cohort_age
      set prevacinfect_group cohort_preGroup
      set essentialJob (agentsOfThisIndex <= cohort_essentialCount)
      set isWorker (agentsOfThisIndex <= cohort_workerCount)
      set isStudent (agentsOfThisIndex <= cohort_studentCount)
      set cohortVacUptake cohort_vaccineUptake
      set cohortVacSuffix cohort_vaccineSuffix
      set cohortHospTime cohort_hospTime
      set cohortIcuTime cohort_icuTime
      set cohortDeathTime cohort_deathTime
      set cohortHospLengthBase cohort_hospLengthBase
      
      set recoverVaccine 0
      set recoverVaccinePopPerSimul 0
      
      set vaccBranch cohort_vaccineBranch
      set vaccBranchFrom2 cohort_branchFrom2
      set vaccReceptive false
      
      set spanMult cohort_spanMult
      set avoidOr cohort_avoidOr
      set gatherFreqMult cohort_gatherFreqMult
      set homeRegion cohort_region
      set succeptOr cohort_succeptOr
      set cohortVacUptakeDose2 cohort_uptakeFromDose2
      
      move-to one-of patches with [ pcolor = black ]
      
      set report_case_draw random-float 1
      set accept_isolation_draw random-float 1
      
      ifelse random-float 1 < _sympt_iso_prop
      [
        ifelse self_iso_at_peak
        [
          set symtomatic_present_day floor (ownIncubationPeriod + pre_present_iso + random-float 1)
        ]
        [
          set symtomatic_present_day round (sympt_present_min + (rngs:rnd-beta presentInitSeedID sympt_present_a sympt_present_b) * (sympt_present_max - sympt_present_min))
        ]
        set symtomatic_present_day round (sympt_present_min + (rngs:rnd-beta presentInitSeedID sympt_present_a sympt_present_b) * (sympt_present_max - sympt_present_min))
      ]
      [
        set symtomatic_present_day -1
      ]
      
      set requireICU 0
      set requireICU_draw random-float 1

      set wearsMask_draw random-float 1
      set returntoschool random 100

      ;;set ownComplianceWithIsolation ( exp random-normal Mcomp SComp ) ;; log transform of compliance with isolation

      simul_resetSomeRandomParams

      setEssentialWorkerPriority
    ]
    
    if agentsOfThisIndex >= cohort_pop [
      set pop_index pop_index + 1
      set agentsOfThisIndex 0
    ]
  ]
  
  ;; Cache the population cohorts.
  set populationCohortCache table:make
  foreach table:keys popDivisionTable [ index ->
    table:put populationCohortCache index simuls with [ cohortIndex = index ]
  ]
  
  setup_DataOut maxHospTime maxIcuTime maxDeathTime
end

to setupInitialVaccination_micromangedMethod
  let initRecoverVar getInitRecoverVariant
  let preVacInfectData 0
  ifelse in_prevac_count > 0
  [
    set preVacInfectData remove-item 0 csv:from-file (word input_pre_vacinfect ((aggIndex mod in_prevac_count) + 1) ".csv")
  ]
  [
    set preVacInfectData remove-item 0 csv:from-file (word input_pre_vacinfect )
  ]
  file-close
  
  let rowIndex 0
  foreach sort-on [agerange] simuls [ sim -> 
    ask sim [
      let row item rowIndex preVacInfectData
      set rowIndex rowIndex + 1
      
      set initPreSetup True
      let in_prevVaccineDay (item 1 row) - init_vacrecover_day
      let in_recoverDay (item 2 row) - init_vacrecover_day
      let in_vaccineDay (item 3 row) - init_vacrecover_day
      
      if in_recoverDay >= 0 [
        ;; Placeholder recoverVaccinePopPerSimul, set like this so that initial infections have
        ;; full immunity. Proper recoverVaccinePopPerSimul is set later in setup.
        simul_setNewRecover (item 4 row) 999999
        set recoverDay -1 * in_recoverDay
      ]
      ifelse in_vaccineDay >= 0
      [
        if _param_vac_uptake_mult * cohortVacUptake > random-float 1 [
          set vaccReceptive true ; Only the most vaccinated are receptive to recieving another vaccine
        ]
        set vaccineDay -1 * in_vaccineDay
        set currentVaccine (word (item 6 row) cohortVacSuffix)
        if in_prevVaccineDay >= 0 [
          set prevVaccineDay -1 * in_prevVaccineDay
          set prevVaccine (word (item 5 row) cohortVacSuffix)
        ] 
      ]
      [
        if in_prevVaccineDay >= 0 [
          if _param_vac_uptake_mult * cohortVacUptakeDose2 > random-float 1 [ 
            set vaccReceptive true ; A member of a cohort may continue on to further vaccination after only dose 2
            set vaccBranch vaccBranchFrom2
          ]
          set vaccineDay -1 * in_prevVaccineDay
          set currentVaccine (word (item 5 row) cohortVacSuffix)
        ] 
      ]
    ]
  ]
  
  if override_recover_prop [
    let yellowSimuls simuls with [ color = yellow ]
    let diff recover_prop * Population - (count yellowSimuls)
    (ifelse diff > 1
      [
        let toAsk min (list (count simuls with [color = cyan]) (diff))
        ask n-of toAsk simuls with [ color = cyan ] [
          let myAge agerange
          let target one-of simuls with [agerange = myAge and color = yellow]
          
          if is-simul? target [
            set recoverVaccinePopPerSimul ([recoverVaccinePopPerSimul] of target)
            set recoverDay ([recoverDay] of target)
            set recoverVaccine ([recoverVaccine] of target)
            set recoverVariant ([recoverVariant] of target)
            set color yellow
          ]
        ]
      ]
      diff < -1
      [
        set diff -1 * diff
        ask n-of (diff) simuls with [ color = yellow ] [
          set recoverVaccinePopPerSimul 0
          set recoverDay 0
          set recoverVaccine 0
          set recoverVariant 0
          set color cyan
        ]
      ]
    )
  ]
end

to setupInitialVaccination
  if _vaccine_enabled [
    setupInitialVaccination_micromangedMethod
  ]
end

to setGlobals
  set anxietyFactor              0
  set InfectionChange            0
  set infectionsToday            0
  set infectionsToday_acc        0
  set infectionsYesterday        0
  set five                       0
  set fifteen                    0
  set twentyfive                 0
  set thirtyfive                 0
  set fortyfive                  0
  set fiftyfive                  0
  set sixtyfive                  0
  set seventyfive                0
  set eightyfive                 0
  set ninetyfive                 0
  set InitialReserves            0
  set AverageContacts            0
  set AverageFinancialContacts   0
  set ScalePhase                 0
  set ScalePhaseMax              0
  set extraScaleFactor           1
  set Days                       -1
  set CaseFatalityRate           0
  set DeathCount                 0
  set recovercount               0
  set recoverCountByVariant      table:make
  set recoverProportion          0
  set casesReportedToday         0
  set casesReportedToday_acc     0
  set hospToday                  0
  set totalHosp                  0
  set ICUBedsRequired            0
  set scaled_Bed_Capacity        0
  set currentInfections          0
  set eliminationDate            0
  set PotentialContacts          0
  set yellowcount                0
  set redcount                   0
  set cumulativeInfected         0
  set scaledPopulation           0
  set MeanR                      0
  set EWInfections               0
  set StudentInfections          0
  set meanDaysInfected           0
  set lasttransday               0
  set lastPeriod                 0
  set casesinperiod28            0
  set casesinperiod14            0
  set casesinperiod7             0
  set infectionsinperiod7        0
  set hospinperiod7              0
  set hospinperiod14             0
  set policymetric7              0
  set policymetric14             0
  set resetDate                  0
  set cashposition               0
  set Objfunction                0
  set decisionDate               0
  set policyTriggerScale         1
  
  set prior0                     preSimDailyCases
  set prior1                     preSimDailyCases
  set prior2                     preSimDailyCases
  set prior3                     preSimDailyCases
  set prior4                     preSimDailyCases
  set prior5                     preSimDailyCases
  set prior6                     preSimDailyCases
  set prior7                     preSimDailyCases
  set prior8                     preSimDailyCases
  set prior9                     preSimDailyCases
  set prior10                    preSimDailyCases
  set prior11                    preSimDailyCases
  set prior12                    preSimDailyCases
  set prior13                    preSimDailyCases
  set prior14                    preSimDailyCases
  set prior15                    preSimDailyCases
  set prior16                    preSimDailyCases
  set prior17                    preSimDailyCases
  set prior18                    preSimDailyCases
  set prior19                    preSimDailyCases
  set prior20                    preSimDailyCases
  set prior21                    preSimDailyCases
  set prior22                    preSimDailyCases
  set prior23                    preSimDailyCases
  set prior24                    preSimDailyCases
  set prior25                    preSimDailyCases
  set prior26                    preSimDailyCases
  set prior27                    preSimDailyCases
  set prior28                    preSimDailyCases
  
  set h_prior0                   preSimDailyHosp
  set h_prior1                   preSimDailyHosp
  set h_prior2                   preSimDailyHosp
  set h_prior3                   preSimDailyHosp
  set h_prior4                   preSimDailyHosp
  set h_prior5                   preSimDailyHosp
  set h_prior6                   preSimDailyHosp
  set h_prior7                   preSimDailyHosp
  set h_prior8                   preSimDailyHosp
  set h_prior9                   preSimDailyHosp
  set h_prior10                  preSimDailyHosp
  set h_prior11                  preSimDailyHosp
  set h_prior12                  preSimDailyHosp
  set h_prior13                  preSimDailyHosp
  set h_prior14                  preSimDailyHosp
  set h_prior15                  preSimDailyHosp
  set h_prior16                  preSimDailyHosp
  set h_prior17                  preSimDailyHosp
  set h_prior18                  preSimDailyHosp
  set h_prior19                  preSimDailyHosp
  set h_prior20                  preSimDailyHosp
  set h_prior21                  preSimDailyHosp
  set h_prior22                  preSimDailyHosp
  set h_prior23                  preSimDailyHosp
  
  set start_day                  0
  set infectivityMult            1
  
  set real_prior0                0
  set real_prior1                0
  set real_prior2                0
  set real_prior3                0
  set real_prior4                0
  set real_prior5                0
  set real_prior6                0

  set slope_prior0               0
  set slope_prior1               0
  set slope_prior2               0
  set slope_prior3               0
  set slope_prior4               0
  set slope_prior5               0
  set slope_prior6               0
  
  set slope                      0
  set slopeCount                 0
  set slopeSum                   0
  set slopeAverage               0
  set casesinperiod7_max         0
  set casesReportedToday_max     0
  
  set testName                   ""
  set traceMult                  1
  set global_trace_again         false
  set trace_eff_base             1
  
  set trackCount                 0
  set trackSum                   0
  set trackAverage               0
  set infectedTrackCount         0
  set infectedTrackSum           0
  set infectedTrackAverage       0
  
  set new_case_real 0
  set new_case_real_counter 0
  
  set stage5time 0
  set stage4time 0
  set stage3time 0
  set stage2time 0
  set stage1time 0
  set casesinperiod7_min -1
  set casesReportedToday_min -1
  set casesinperiod7_final -1
  set pre_stop_day -1
  set casesinperiod7_switchTime 0
  set cumulativeInfected_switchTime 0
  
  ;; These used to be dynamic controls with conflicting variable names.
  set spatial_distance 0
  set case_isolation 0
  set quarantine 0
  set Track_and_Trace_Efficiency 0
  set stage 0
  set prev_stage -1

  set stageHasChanged 0
  set stageToday 0
  set stageYesterday 0
  set PrimaryUpper 0
  set SecondaryLower 0
  
  set houseTrackedCaseTimeTable table:make
  set houseLocationTable table:make
  set houseStudentMoveCache table:make
  set houseStudentMoveCache_lastUpdate table:make
  set houseStudentMoveCache_staleTime 0
  
  set popDivisionTable 0 ; Table of population cohort data

  ; Number of agents that are workers and essential workers respectively.
  set totalWorkers 0
  set totalEssentialWorkers 0
  set essentialWorkerRange 0
  set otherWorkerRange 0

  set transmission_count 0
  set transmission_count_metric 0
  set transmission_sum 0
  set transmission_average 0
  
  set avoidSuccess 0
  set avoidAttempts 0
  
  set incursionsSeedID 0
  set incursionPhaseIndex 0
  set incursionPhaseEndDay 0
  
  set totalOverseasIncursions 0
  set vaccineEffseedID 0
  
  set totalEndR table:make
  set totalEndCount table:make
  set endR_sum table:make
  set endR_count table:make
  set endR_mean_metric table:make
  set average_R table:make

  ;; log transform compliance period variables
  set Compliance_PeriodVariance 0
  set MComp 0
  set BetaCompliance 0
  set SComp 0

  ;; file reading and draw handling
  set drawNumber 0
  set drawRandomSeed 0
  
  set initial_infection_R -1
  set stop_simulation false
  set R_measure_time -1
  set cumulative_tracked_all 0
  set cumulative_tracked_notice 0
  
  set infectNoVacArray_listOut []
  set infectVacArray_listOut []
  set case_listOut []
  set case7_listOut []
  set case14_listOut []
  set case28_listOut []
  set stage_listOut []
  
  set dieArray_listOut        []
  set icuArray_listOut        []
  set hospArray_listOut       []
  set hospTimeArray_listOut   []
  set symptArray_listOut      []
  set vaccineArray_listOut    []
  
  set hospDaysAbove500_out  0
  set hospDaysAbove750_out  0
  set hospDaysAbove1000_out 0
  set hospDaysAbove1250_out 0
  set hospDaysAbove1500_out 0
  set hospDaysAbove1750_out 0
  set hospDaysAbove2000_out 0
end

;;*******************************************************************************************************************************
;;** Buttons **
;;*******************************************************************************************************************************

to setup
  clear-all
  reset-ticks
  
  setGlobals
  
  params_readStaticDraws
  params_readDrawTable
  params_setDrawValues
  ageVariant_setup

  profiler:reset
  if profile_on [
    profiler:start
  ]
  loadPopDivisionTable
  loadRegionTable
  resetAccumulators
  setupPipes
  setup_mask
  
  ;;import-drawing "Background1.png" ;; imports MSD image
  if first_case_calibrate [ 
    set days 0 ; used to count days
  ]
  set stage init_stage
  
  processPopulationData
  setup_variantData
  setup_vaccineData
  setup_incursionData
  
  set resetdate 7
  set Scale_Factor 2
  
  ask patches [
    set pcolor black
    set houseIndex -1
    set lastInfectionUpdate -1
    set lastUtilTime -1
    set infectionCulprit table:make
    set destRadiusCache table:make
  ]
  
  ;; a beta function for testing locating many people in one place at a single time
  ask n-of Gather_Location_Count patches with [ pcolor = black ] [
    set pcolor grey
    set destination 1
  ]
  set destination_patches patches with [ destination = 1 ]

  set initial_primary ceiling (initial_primary_prop * _initial_cases)
  set initial_secondary (_initial_cases - initial_primary)
  
  ;; set up initial infected people
  scale_setup
  set scalephase GetInitialScale (initial_primary + initial_secondary)
  
  let popPerSimul extraScaleFactor * (Scale_Factor ^ scalephase)
  set globalPopPerSimul popPerSimul
  
  ;; Create simulants etc
  createSimulants
  setupInitialVaccination
  costs_setup
  
  let potentialInitCases simuls
  if init_cases_region != -1 [
    set potentialInitCases simuls with [homeRegion = init_cases_region]
  ]
  
  ask n-of ( initial_primary / popPerSimul ) potentialInitCases [
    set myScale scalePhase
    simul_setNewInfection getRandomInitVariant (random (floor min (list init_timenow_limit ownIllnessPeriod))) 1
    set isInitialInfection true
    set contributeToR false
    set infectedContactList table:make
    set hasKnownContact false
    simul_updateVariantParams
    
    if trace_calibration > 0 [
      set cali_timenow timenow
      set cali_asymptomaticFlag asymptomaticFlag
      set cali_symtomatic_present_day symtomatic_present_day
    ]
    if random-float 1 < _init_trace_prop [
      simul_applyTrace 
    ]
    
    ;set infectionsToday_acc infectionsToday_acc + 1
    ;; Do not add to infection output as it makes for poor traces.
    ;array:set infectNoVacArray cohortIndex (array:item infectNoVacArray cohortIndex) + popPerSimul
  ]

  set Quarantine false
  set eliminationDate 0 ; used to identify the date of elimination where no current, unrecovered cases exist
  set spatial_distance false
  set case_isolation false

  ;; Initialise housing
  reset_housing house_init_group
  
  ;; this ensures that half the people in households with existing infections have also have an infection and prevents a big spike early-on
  let init_secondry_infect initial_secondary
  ask potentialInitCases [
    let nearSimuls (other simuls in-radius 2 with [ color = red ])
    if init_secondry_infect > popPerSimul and any? nearSimuls [
      set myScale scalePhase
      simul_setNewInfection getRandomInitVariant (random (floor min (list init_timenow_limit ownIllnessPeriod))) 1
      set isInitialInfection true
      set contributeToR false
      set infectedContactList table:make
      set hasKnownContact false
      
      let nearSimul one-of nearSimuls
      let thisSimul self
      table:put infectedContactList table:length infectedContactList nearSimul
      ask nearSimul [
        table:put infectedContactList table:length infectedContactList thisSimul
      ]
      
      if random-float 1 < _init_trace_prop [
       simul_applyTrace 
      ]
      simul_updateVariantParams
      
      set init_secondry_infect init_secondry_infect - popPerSimul
      
      ;set infectionsToday_acc infectionsToday_acc + popPerSimul
      ;; Do not add to infection output as it makes for poor traces.
      ;;array:set infectNoVacArray cohortIndex (array:item infectNoVacArray cohortIndex) + popPerSimul
    ]
  ]

  let localYellowCount (count simuls with [color = yellow])
  set recovercount localYellowCount * total_population / Population
  ask simuls with [color = yellow] [
    set recoverVaccinePopPerSimul recovercount / localYellowCount
  ]
  
  table:put recoverCountByVariant getInitRecoverVariant recovercount
  set dailyRecoverMult exp(ln(1 - yearly_recover_prop_loss) / 365)
  ;;set tracking false ;; ensures this is set to false each time the model starts
  ;;set link_switch false ;; ensures this is set to false each timme the model starts
  ;;set schoolsOpen false ;; ensures that the schools settings don't begin before the policy trigger starts
  ;;set maskPolicy false ;; that the mask policy doesn't begin before the policy trigger starts
  ;;set assignAppEss false ;; that the assigning the App to EssentialWorkers doesn't begin before the policy trigger starts
  
  setupstages ;; setting up for the MJA runs

  ;; Optionallly change random seed for simulation to compare simulation uncertainty to draw uncertainty
  if SIM_SEED > -1 [
    random-seed SIM_SEED
    rngs:set-seed defaultStream random-float 999
    rngs:set-seed incursionsSeedID random-float 999
    rngs:set-seed houseSeedID random-float 999
    rngs:set-seed vaccineEffseedID random-float 999
    rngs:set-seed vaccineInitSeedID random-float 999
    rngs:set-seed moveInitSeedID random-float 999
    rngs:set-seed presentInitSeedID random-float 999
    rngs:set-seed variantSeedID random-float 999
  ]
  
  ;; Output infection rates 
  if trace_print [
    test_traceadjust
  ]
end