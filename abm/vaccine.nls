

to-report vaccine_binomCheck [draw succeptibility repeats]
  report 1 - (1 - succeptibility) ^ repeats > draw
end

to setup_vaccineSchedule
  let fileData remove-item 0 csv:from-file (word input_vaccine_schedule)
  set vaccineSchedule fileData
  
  set vaccineBranchDoseRate table:make
  set vaccineBranchAvailible table:make
  set vaccineBranchQueue table:make
  set vaccineBranchVaccType table:make
end

to-report ApplyOddsRatio [vacTable paramName]
  let basePr table:get drawParams paramName
  let oddsRatio table:get vacTable paramName
  
  let resultLnOdds ln ((PrToOdds basePr) * oddsRatio)
  table:put vacTable paramName resultLnOdds
  report vacTable
end

to-report ApplyMultiplier [vacTable paramName]
  let baseValue table:get drawParams paramName
  let mult table:get vacTable paramName
  
  let result baseValue * mult
  table:put vacTable paramName result
  report vacTable
  report vacTable
end

to setup_vaccineData
  set vacineEff_nameOut []
  set vacineEff_transOut []
  set vacineEff_areaOut []
  
  set vaccineParamsTable table:make
  foreach variantNames [ variant ->
    let vaccineParamsFileData remove-item 0 csv:from-file (word input_vac_params "_" variant ".csv")
    let paramsTable table:make
    let i 0
    foreach vaccineParamsFileData [ rawData -> 
      let vacTable table:make      
      table:put vacTable "name" (item 0 rawData)
      table:put vacTable "infectReduct" (item 1 rawData)
      table:put vacTable "riskReduct" (item 2 rawData)
      table:put vacTable "reduceSympt" (item 3 rawData)
      table:put vacTable "reduceHosp" (item 4 rawData)
      table:put vacTable "reduceMort" (item 5 rawData)
      table:put vacTable "effectDays" (item 6 rawData)
      table:put vacTable "waneRate" (item 7 rawData)
      
      set vacTable ApplyOddsRatio vacTable "infectReduct"
      set vacTable ApplyOddsRatio vacTable "riskReduct"
      set vacTable ApplyOddsRatio vacTable "reduceSympt"
      set vacTable ApplyOddsRatio vacTable "reduceHosp"
      set vacTable ApplyOddsRatio vacTable "reduceMort"
      set vacTable ApplyMultiplier vacTable "effectDays"
      set vacTable ApplyMultiplier vacTable "waneRate"
      
      table:put paramsTable (item 0 rawData) vacTable
      
      set vacineEff_nameOut lput (word variant "_" (table:get vacTable "name")) vacineEff_nameOut
      set vacineEff_transOut lput (table:get vacTable "riskReduct") vacineEff_transOut
      set vacineEff_areaOut lput (table:get vacTable "infectReduct") vacineEff_areaOut
    ]
    table:put vaccineParamsTable variant paramsTable
  ]
  
  setup_vaccineSchedule
end

to-report vaccine_getWanedParameter [paramName variant vac day prevVac prevDay]
  if vac = 0 [
    report 1
  ]
  
  let paramsTable table:get vaccineParamsTable variant
  let vacParams table:get paramsTable vac
  let effDays (table:get vacParams "effectDays")
  if effDays + day > days [
    if prevVac = 0 [
      report 1
    ]
    set vacParams table:get paramsTable prevVac
    set effDays (table:get vacParams "effectDays")
    set day prevDay
  ]
  
  let vacEff table:get vacParams paramName
  set vacEff vacEff - (days - (effDays + day)) * (table:get vacParams "waneRate")
  ;; TODO waning based on day
  report 1 - LnOddsToPr (vacEff)
end

to simul_updateVaccineParams
  
end

to simul_applyVaccine [vaccinateType]
  if 1 - param_vac_uptake_mult * cohortVacUptake > random-float 1 [
    ;; Each vaccine sees some receptive people decide this is their last shot
    set vaccReceptive false
  ]
  
  set prevVaccineDay vaccineDay
  set prevVaccine currentVaccine
  
  set vaccineDay days
  set currentVaccine (word vaccinateType cohortVacSuffix)
end

to add_vaccine [branch]
  let increase (table:get vaccineBranchDoseRate branch)
  table:put vaccineBranchAvailible branch ((table:get vaccineBranchAvailible branch) + increase)  
end

to vaccineMode_micromanageDoses [branch]
  add_vaccine branch
  let vaccinateToday floor(table:get vaccineBranchAvailible branch)
  let vaccinateType table:get vaccineBranchVaccType branch
  table:put vaccineBranchAvailible branch ((table:get vaccineBranchAvailible branch) - vaccinateToday)
  
  let vacQueue (table:get vaccineBranchQueue branch)
  while [vaccinateToday >= 1 and not empty? vacQueue] [
    ask first vacQueue [
      simul_applyVaccine vaccinateType
    ]
    set vacQueue but-first vacQueue
    set vaccinateToday vaccinateToday - 1
  ]
  table:put vaccineBranchQueue branch vacQueue
end

to vaccine_updateSchedule
  while [not empty? vaccineSchedule and (item 0 item 0 vaccineSchedule) = days] [
    let data (item 0 vaccineSchedule)
    
    let vaccDays (item 1 data)
    let branch (item 2 data)
    let vaccineType (item 3 data)
    
    let wantVaccine simuls with [vaccBranch = branch and vaccReceptive = true]
    
    table:put vaccineBranchDoseRate branch (count wantVaccine) / vaccDays
    table:put vaccineBranchAvailible branch 0
    table:put vaccineBranchQueue branch (sort-on [-1 * agerange] wantVaccine)
    table:put vaccineBranchVaccType branch vaccineType
    
    set vaccineSchedule but-first vaccineSchedule
  ]
end

to vaccine_update
  if _vaccine_enabled and days > 0 [
    vaccine_updateSchedule
    
    foreach table:keys vaccineBranchAvailible [ branch ->
      vaccineMode_micromanageDoses branch
    ]
  ]
end
