
to-report LnOddsToPr [lnOdd]
  let odds exp lnOdd
  report odds / (1 + odds)
end

to-report PrToLnOdds [pr]
  report ln (pr / (1 - pr))
end

to-report AddLogOdds [prob toAdd]
  let odds exp ((ln (prob / ( 1 - prob))) + toAdd)
  report odds / (odds + 1)
end

to setup_doseTable
  let doseFileData csv:from-file (word input_dose_rate_table in_dose1 in_dose2 data_suffix)
  set vaccineDoseRateTable table:make
  let i -1
  let j 0
  let header 0
  foreach doseFileData [ x -> 
    ifelse i = -1
    [
      set header x
      foreach x [ y -> 
        table:put vaccineDoseRateTable y table:make
      ]
    ]
    [
      set j 0
      foreach x [ y -> 
        table:put (table:get vaccineDoseRateTable (item j header)) i y
        set j j + 1
      ]
    ]
    set i i + 1
  ]
  ;print (word "vaccineDoseRateTable " vaccineDoseRateTable)
end

to setup_vaccineData
  let inputFile (word input_vac_branch data_suffix)
  let branchFileData remove-item 0 csv:from-file inputFile
  
  set vaccineBranchNames []
  set vaccineNextBranch table:make
  
  set vaccineBranchQueue table:make
  set global_vaccineAvailible table:make
  
  setup_doseTable
  foreach branchFileData [ x ->
    let branch (item 0 x)
    set vaccineBranchNames lput branch vaccineBranchNames
    table:put vaccineBranchQueue branch (list)
    table:put global_vaccineAvailible branch 0
    table:put vaccineNextBranch branch (item 1 x)
  ]
  ;print (word "vaccineBranchStartIndex " vaccineBranchStartIndex)
  ;print (word "vaccineBranches " vaccineBranches)
  
  set vacineEff_nameOut []
  set vacineEff_transOut []
  set vacineEff_areaOut []
  
  let vaccineParamsFileData remove-item 0 csv:from-file (word input_vac_params "_" "alpha" ".csv") ; TODO LOAD per variant
  set vaccineParamsTable table:make
  let i 0
  foreach vaccineParamsFileData [ rawData -> 
    let vacName (item 0 rawData)
    let vacRiskReduct rngs:rnd-beta vaccineEffseedID (item 1 rawData) (item 2 rawData)
    let vacInfectReduct rngs:rnd-beta vaccineEffseedID (item 3 rawData) (item 4 rawData)
    if param_override_ve >= 0 [
      set vacRiskReduct param_override_ve
    ]
    if param_override_ve_area >= 0 [
      set vacInfectReduct param_override_ve_area
    ]
    let vacEffectDays item 7 rawData
    table:put vaccineParamsTable vacName (list vacRiskReduct vacInfectReduct vacEffectDays)
    
    set vacineEff_nameOut lput vacName vacineEff_nameOut
    set vacineEff_transOut lput vacRiskReduct vacineEff_transOut
    set vacineEff_areaOut lput vacInfectReduct vacineEff_areaOut
  ]
end

to simul_updateVaccineParams
  
end

to simul_addToBranchQueue
  if table:has-key? vaccineBranchQueue vaccBranch [
    table:put vaccineBranchQueue vaccBranch (lput self (table:get vaccineBranchQueue vaccBranch))
  ]
end

to simul_applyVaccine
  
end

to simul_vaccinate_me_force [daysSinceFirstDose daysSinceSecondDose effectDays]
  if Vaccine_Available = true [
    ; TODO vaccination
    simul_addToBranchQueue
  ]
end

to simul_vaccinate_me
  let myVaccineData table:get vaccineParamsTable currentVaccine
  if table:has-key? vaccineNextBranch vaccBranch [
    simul_addToBranchQueue
    ;; vacEffectCountdown is set so do not simul_updateVacAndReinfectMult here.
  ]
end

to add_vaccine [branch]
  let increase 0
  if table:has-key? (table:get vaccineDoseRateTable branch) (ticks - start_day) [
    set increase (table:get (table:get vaccineDoseRateTable branch) (ticks - start_day))
  ]
  set increase increase
  table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) + increase)  
end

to vaccineMode_micromanageDoses [branch]
  add_vaccine branch
  let vaccinateToday floor(table:get global_vaccineAvailible branch)
  table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) - vaccinateToday)
  
  let vacQueue ((table:get vaccineBranchQueue branch))
  while [vaccinateToday >= 1 and not empty? vacQueue] [
    ask first vacQueue [
      simul_vaccinate_me
    ]
    set vacQueue but-first vacQueue
    set vaccinateToday vaccinateToday - 1
  ]
  table:put vaccineBranchQueue branch vacQueue
end

to vaccine_update
  if start_metric_threshold < 0 and Vaccine_Available = True [
    foreach vaccineBranchNames [ branch -> 
      vaccineMode_micromanageDoses branch
    ]
  ]
end
