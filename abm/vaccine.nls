

to-report vaccine_binomCheck [draw succeptibility repeats]
  report 1 - (1 - succeptibility) ^ repeats > draw
end

to setup_vaccineSchedule
  let fileData remove-item 0 csv:from-file (word input_vaccine_schedule)
  file-close
  set vaccineSchedule fileData
  
  set vaccineBranchDoseRate table:make
  set vaccineBranchAvailible table:make
  set vaccineBranchQueue table:make
  set vaccineBranchVaccType table:make
end

to-report ApplyOddsRatio [vacTable baseParams uncertainty correlateDraws correlateKey paramName]
  let basePr table:get baseParams paramName
  let oddsRatio table:get vacTable paramName
  
  let lowerOr oddsRatio * (1 - uncertainty)
  let upperOr oddsRatio * (1 + uncertainty * 1.1886792452)

  let lowerLnOdd OddsToLnOdds lowerOr
  let upperLnOdd OddsToLnOdds upperOr
  
  if not table:has-key? correlateDraws correlateKey [
   table:put correlateDraws correlateKey (random-float 1)
  ]
  
  let drawLnOdds lowerLnOdd + (upperLnOdd - lowerLnOdd) * (table:get correlateDraws correlateKey)
  let resultLnOdds (PrToLnOdds basePr) + drawLnOdds
  
  ;if paramName = "infectReduct" [
  ;  print (word oddsRatio ", " uncertainty ", " basePr ", " (LnOddsToPr resultLnOdds) ", " (PrToLnOdds basePr) ", " (LnOddsToOdds drawLnOdds) ", " drawLnOdds ", " resultLnOdds)
  ;]
  table:put vacTable paramName resultLnOdds
  report vacTable
end

to-report ApplyMultiplier [vacTable baseParams paramName]
  let baseValue table:get baseParams paramName
  let mult table:get vacTable paramName
  
  let result baseValue * mult
  table:put vacTable paramName result
  report vacTable
  report vacTable
end

to setup_vaccineData
  ;; Load base parameters.
  let baseParamsTable table:make
  let baseParamsData 0
  ifelse in_prevac_count > 0
  [
    set baseParamsData remove-item 0 csv:from-file (word input_vaccine_base ((aggIndex mod in_vaccine_count) + 1) ".csv")
  ]
  [
    set baseParamsData remove-item 0 csv:from-file (word input_vaccine_base ".csv")
  ]
  
  file-close
  foreach baseParamsData [ rawData ->
    let vacTable table:make
    
    let index -1
    set index index + 1    table:put vacTable "name"         (item index rawData)
    set index index + 1    table:put vacTable "effectDays"   (item index rawData)
    set index index + 1    table:put vacTable "infectReduct" (item index rawData)
    set index index + 1    table:put vacTable "reduceHosp"   (item index rawData)
    set index index + 1    table:put vacTable "reduceIcu"    (item index rawData)
    set index index + 1    table:put vacTable "reduceMort"   (item index rawData)
    set index index + 1    table:put vacTable "reduceSympt"  (item index rawData)
    set index index + 1    table:put vacTable "riskReduct"   (item index rawData)
    set index index + 1    table:put vacTable "waneRate"     (item index rawData)
    set index index + 1    table:put vacTable "waneRateOut"  (item index rawData)
    
    if table:get vacTable "name" = "cur_3" [
      set sen_vacInfectReduct_out table:get vacTable "infectReduct"
      set sen_vacWaneInfect_out table:get vacTable "waneRate"
      set sen_vacWaneHosp_out table:get vacTable "waneRateOut"
    ]
    if table:get vacTable "name" = "recover" [
      set sen_recoverInfectReduct_out table:get vacTable "infectReduct"
      set sen_recoverWane_out table:get vacTable "waneRate"
    ]
    
    table:put baseParamsTable (item 0 rawData) vacTable
  ]
  
  ;; Load OR uncertainty
  let uncertParamsData csv:from-file (word input_matchup_uncertainty)
  let uncertParamsTable LoadCsvListListToTableTable uncertParamsData
  
  ;; Load each vaccine table, applying the values as OR to base params.
  set vacineEff_nameOut []
  set vacineEff_transOut []
  set vacineEff_areaOut []
  
  set vaccineParamsTable table:make
  let correlateDraws table:make ; Store previous draws for correlation.
  foreach variantNames [ variant ->
    let vaccineParamsFileData remove-item 0 csv:from-file (word input_vac_params "_" variant ".csv")
    file-close
    let paramsTable table:make
    let i 0
    foreach vaccineParamsFileData [ rawData -> 
      let vacTable table:make

      let vacName (item 0 rawData)
      table:put vacTable "name"         vacName

      let index 0
      set index index + 1    table:put vacTable "infectReduct" (item index rawData)
      set index index + 1    table:put vacTable "riskReduct"   (item index rawData)
      set index index + 1    table:put vacTable "reduceSympt"  (item index rawData)
      set index index + 1    table:put vacTable "reduceHosp"   (item index rawData)
      set index index + 1    table:put vacTable "reduceIcu"    (item index rawData)
      set index index + 1    table:put vacTable "reduceMort"   (item index rawData)
      set index index + 1    table:put vacTable "effectDays"   (item index rawData)
      set index index + 1    table:put vacTable "waneRate"     (item index rawData)
      set index index + 1    table:put vacTable "waneRateOut"  (item index rawData)
      set index index + 1    let baseParamName                 (item index rawData)

      let uncertaintyValue table:get (table:get uncertParamsTable variant) vacName
      let correlateKey table:get (table:get uncertParamsTable "correlateKey") vacName
      
      let myBaseParams table:get baseParamsTable baseParamName
      set vacTable ApplyOddsRatio vacTable myBaseParams uncertaintyValue correlateDraws correlateKey "infectReduct"
      set vacTable ApplyOddsRatio vacTable myBaseParams uncertaintyValue correlateDraws correlateKey "riskReduct"
      set vacTable ApplyOddsRatio vacTable myBaseParams uncertaintyValue correlateDraws correlateKey "reduceSympt"
      set vacTable ApplyOddsRatio vacTable myBaseParams uncertaintyValue correlateDraws correlateKey "reduceHosp"
      set vacTable ApplyOddsRatio vacTable myBaseParams uncertaintyValue correlateDraws correlateKey "reduceIcu"
      set vacTable ApplyOddsRatio vacTable myBaseParams uncertaintyValue correlateDraws correlateKey "reduceMort"
      set vacTable ApplyMultiplier vacTable myBaseParams "effectDays"
      set vacTable ApplyMultiplier vacTable myBaseParams "waneRate"
      set vacTable ApplyMultiplier vacTable myBaseParams "waneRateOut"
      
      table:put paramsTable (item 0 rawData) vacTable
      
      set vacineEff_nameOut lput (word variant "_" (table:get vacTable "name")) vacineEff_nameOut
      set vacineEff_transOut lput (table:get vacTable "riskReduct") vacineEff_transOut
      set vacineEff_areaOut lput (table:get vacTable "infectReduct") vacineEff_areaOut
    ]
    table:put vaccineParamsTable variant paramsTable
  ]
  
  setup_vaccineSchedule
end

to-report vaccine_getWanedParameter [paramName variant vac day prevVac prevDay]
  if vac = 0 [
    report 1
  ]
  let paramsTable table:get vaccineParamsTable variant
  let vacParams table:get paramsTable vac
  let effDays (table:get vacParams "effectDays")
  if effDays + day > days [
    if prevVac = 0 [
      report 1
    ]
    set vacParams table:get paramsTable prevVac
    set effDays (table:get vacParams "effectDays")
    set day prevDay
  ]
  
  let vacEff table:get vacParams paramName
  let daysAgo (days - (effDays + day))
  
  ifelse paramName = "reduceHosp" or paramName = "reduceIcu" or paramName = "reduceMort"
  [
    set vacEff vacEff - daysAgo * (table:get vacParams "waneRateOut")
  ]
  [
    set vacEff vacEff - daysAgo * (table:get vacParams "waneRate")
  ]
  ;; TODO waning based on day
  report 1 - LnOddsToPr (vacEff)
end

to simul_applyVaccine [vaccinateType]
  if 1 - _param_vac_uptake_mult * cohortVacUptake > random-float 1 [
    ;; Each vaccine sees some receptive people decide this is their last shot
    set vaccReceptive false
  ]
  
  set prevVaccineDay vaccineDay
  set prevVaccine currentVaccine
  
  set vaccineDay days
  set currentVaccine (word vaccinateType cohortVacSuffix)
  ApplyVaccinationCost agerange (total_population / population) vaccinateType
  dataOut_addVaccine currentVaccine
end

to add_vaccine [branch]
  let increase (table:get vaccineBranchDoseRate branch)
  table:put vaccineBranchAvailible branch ((table:get vaccineBranchAvailible branch) + increase)  
end

to vaccineMode_micromanageDoses [branch]
  add_vaccine branch
  let vaccinateToday floor(table:get vaccineBranchAvailible branch)
  let vaccinateType table:get vaccineBranchVaccType branch
  table:put vaccineBranchAvailible branch ((table:get vaccineBranchAvailible branch) - vaccinateToday)
  
  let vacQueue (table:get vaccineBranchQueue branch)
  while [vaccinateToday >= 1 and not empty? vacQueue] [
    ask first vacQueue [
      simul_applyVaccine vaccinateType
    ]
    set vacQueue but-first vacQueue
    set vaccinateToday vaccinateToday - 1
  ]
  table:put vaccineBranchQueue branch vacQueue
end

to vaccine_updateSchedule
  while [not empty? vaccineSchedule and (item 0 item 0 vaccineSchedule) = days] [
    let data (item 0 vaccineSchedule)
    
    let vaccDays (item 1 data)
    let branch (item 2 data)
    let vaccineType (item 3 data)
    
    let wantVaccine simuls with [vaccBranch = branch and vaccReceptive = true]
    
    table:put vaccineBranchDoseRate branch (count wantVaccine) / vaccDays
    table:put vaccineBranchAvailible branch 0
    table:put vaccineBranchQueue branch (sort-on [-1 * agerange] wantVaccine)
    table:put vaccineBranchVaccType branch vaccineType
    
    set vaccineSchedule but-first vaccineSchedule
  ]
end

to vaccine_update
  if _vaccine_enabled and days >= 0 [
    vaccine_updateSchedule
    
    foreach table:keys vaccineBranchAvailible [ branch ->
      vaccineMode_micromanageDoses branch
    ]
  ]
end
