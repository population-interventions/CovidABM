
to-report AddLogOdds [prob toAdd]
  let odds exp ((ln (prob / ( 1 - prob))) + toAdd)
  report odds / (odds + 1)
end

to setup_doseTable
  let doseFileData csv:from-file (word input_dose_rate_table in_dose1 in_dose2 data_suffix)
  set vaccineDoseRateTable table:make
  let i -1
  let j 0
  let header 0
  foreach doseFileData [ x -> 
    ifelse i = -1
    [
      set header x
      foreach x [ y -> 
        table:put vaccineDoseRateTable y table:make
      ]
    ]
    [
      set j 0
      foreach x [ y -> 
        table:put (table:get vaccineDoseRateTable (item j header)) i y
        set j j + 1
      ]
    ]
    set i i + 1
  ]
  ;print (word "vaccineDoseRateTable " vaccineDoseRateTable)
end

to setup_vaccineData
  let inputFile (word input_vac_branch data_suffix)
  let branchFileData remove-item 0 csv:from-file inputFile
  
  set vaccineBranchNames []
  set vaccineNextBranch table:make
  
  set vaccineBranchQueue table:make
  set global_vaccineAvailible table:make
  
  setup_doseTable
  foreach branchFileData [ x ->
    let branch (item 0 x)
    set vaccineBranchNames lput branch vaccineBranchNames
    table:put vaccineBranchQueue branch (list)
    table:put global_vaccineAvailible branch 0
    table:put vaccineNextBranch branch (item 1 x)
  ]
  ;print (word "vaccineBranchStartIndex " vaccineBranchStartIndex)
  ;print (word "vaccineBranches " vaccineBranches)
  
  set vacineEff_nameOut []
  set vacineEff_transOut []
  set vacineEff_areaOut []
  
  let vaccineParamsFileData remove-item 0 csv:from-file input_vac_params
  set vaccineParamsTable table:make
  set vaccineParams_riskMult table:make
  set vaccineParams_infectMult table:make
  let i 0
  foreach vaccineParamsFileData [ rawData -> 
    let vacName item 0 rawData
    let vacRiskReduct rngs:rnd-beta vaccineEffseedID (item 1 rawData) (item 2 rawData)
    let vacInfectReduct rngs:rnd-beta vaccineEffseedID (item 3 rawData) (item 4 rawData)
    if param_override_ve >= 0 [
      set vacRiskReduct param_override_ve
    ]
    if param_override_ve_area >= 0 [
      set vacInfectReduct param_override_ve_area
    ]
    let partialDays item 5 rawData
    let vacEffectDays item 6 rawData
    table:put vaccineParamsTable vacName (list vacRiskReduct vacInfectReduct partialDays vacEffectDays)
    table:put vaccineParams_riskMult vacName (list (item 7 rawData) (item 8 rawData) (item 9 rawData))
    table:put vaccineParams_infectMult vacName (list (item 10 rawData) (item 11 rawData) (item 12 rawData))
    
    set vacineEff_nameOut lput vacName vacineEff_nameOut
    set vacineEff_transOut lput vacRiskReduct vacineEff_transOut
    set vacineEff_areaOut lput vacInfectReduct vacineEff_areaOut
  ]
end

to simul_addToBranchQueue
  if table:has-key? vaccineBranchQueue vaccBranch [
    table:put vaccineBranchQueue vaccBranch (lput self (table:get vaccineBranchQueue vaccBranch))
  ]
end

to simul_vaccinate_me_force [daysSinceFirstDose daysSinceSecondDose effectDays]
  if Vaccine_Available = true [
    set doseCount 1
    let daysSinceDose daysSinceFirstDose
    if table:has-key? vaccineNextBranch vaccBranch [
      set vaccBranch table:get vaccineNextBranch vaccBranch
    ]
    if daysSinceSecondDose >= 0 [
      set doseCount 2
      set daysSinceDose daysSinceSecondDose
      if table:has-key? vaccineNextBranch vaccBranch [
        set vaccBranch table:get vaccineNextBranch vaccBranch
      ]
    ]
    
    if daysSinceDose < effectDays [
      set vacEffectCountdown (effectDays - daysSinceDose)
    ]
    
    let daysSinceEffectiveDose (daysSinceFirstDose - effectDays)
    let waneAmount wane_1
    if doseCount = 2 and vacEffectCountdown <= 0 [
      set daysSinceEffectiveDose (daysSinceSecondDose - effectDays)
      set waneAmount wane_2
    ]
    
    simul_addToBranchQueue
    simul_updateVacAndReinfectMult
    
    if selfVaccEff_raw_infect > 0 and daysSinceEffectiveDose > 0 [
      set selfVaccEff_raw_infect AddLogOdds selfVaccEff_raw_infect (waneAmount * daysSinceEffectiveDose)
      set selfVaccEff_raw_risk AddLogOdds selfVaccEff_raw_risk (waneAmount * daysSinceEffectiveDose)
      simul_updateVacAndReinfectMult
    ]
  ]
end

to simul_vaccinate_me
  let myVaccineData table:get vaccineParamsTable vaccineType
  let effectDays item 3 myVaccineData
  set vacEffectCountdown effectDays
  set doseCount doseCount + 1
  if table:has-key? vaccineNextBranch vaccBranch [
    set vaccBranch table:get vaccineNextBranch vaccBranch
    simul_addToBranchQueue
    ;; vacEffectCountdown is set so do not simul_updateVacAndReinfectMult here.
  ]
end

to simul_updateVaccineAndRecover
  if doseCount > 0 [
    let effectiveDoseCount doseCount
    if vacEffectCountdown > 0 [
      set effectiveDoseCount effectiveDoseCount - 1
    ]
    if effectiveDoseCount >= 1 [
      let waneAmount 0
      (ifelse effectiveDoseCount = 1
        [
          set waneAmount wane_1
        ]
        effectiveDoseCount = 2
        [
          set waneAmount wane_2
        ]
        effectiveDoseCount = 3
        [
          set waneAmount wane_3
        ]
      )
      if selfVaccEff_raw_infect > 0 [
        set selfVaccEff_raw_infect AddLogOdds selfVaccEff_raw_infect waneAmount
        set selfVaccEff_raw_risk AddLogOdds selfVaccEff_raw_risk waneAmount
        simul_updateVacAndReinfectMult
      ]
    ]
  ]
  
  if color = yellow [
    if reinfect_risk > 0 and reinfect_risk < 1 [
      set reinfect_risk AddLogOdds reinfect_risk reinfect_wane
    ]
    if reinfect_area > 0 and reinfect_area < 1 [
      set reinfect_area AddLogOdds reinfect_area reinfect_wane
    ]
  ]
  
  if vacEffectCountdown > 0 [
    set vacEffectCountdown vacEffectCountdown - 1
    if vacEffectCountdown = 0 [
      let myVaccineData table:get vaccineParamsTable vaccineType
      set selfVaccEff_raw_risk (item 0 myVaccineData) * (item (doseCount - 1) (table:get vaccineParams_riskMult vaccineType))
      set selfVaccEff_raw_infect (item 1 myVaccineData) * (item (doseCount - 1) (table:get vaccineParams_infectMult vaccineType))
      simul_updateVacAndReinfectMult
    ]
  ]
end

to add_vaccine [branch]
  let increase 0
  if table:has-key? (table:get vaccineDoseRateTable branch) (ticks - start_day) [
    set increase (table:get (table:get vaccineDoseRateTable branch) (ticks - start_day))
  ]
  set increase increase
  table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) + increase)  
end

to vaccineMode_micromanageDoses [branch]
  add_vaccine branch
  let vaccinateToday floor(table:get global_vaccineAvailible branch)
  table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) - vaccinateToday)
  
  let vacQueue ((table:get vaccineBranchQueue branch))
  while [vaccinateToday >= 1 and not empty? vacQueue] [
    ask first vacQueue [
      simul_vaccinate_me
    ]
    set vacQueue but-first vacQueue
    set vaccinateToday vaccinateToday - 1
  ]
  table:put vaccineBranchQueue branch vacQueue
end

to vaccine_update
  if start_metric_threshold < 0 and Vaccine_Available = True [
    foreach vaccineBranchNames [ branch -> 
      vaccineMode_micromanageDoses branch
    ]
  ]
end
