
to setup_incursionData
  (ifelse first_case_calibrate
    [
      ;; No incursion
      set incursionTable table:make
      table:put incursionTable 0 (list incur_day 0 0 0 0 0 0 0 1 1)
      table:put incursionTable 1 (list 0 0 0 0 0 0 0 0 1 1)
    ]
    input_incursion_table = "none"
    [
      ;; Implement simple incursion parameters for 2^n variable
      set incursionTable table:make
      let varName (word incur_name_part_1 incur_name_part_2 incur_name_part_3)
      table:put incursionTable 0 (list incur_day 0 0 0 0 0 base_name 0 1 1)
      table:put incursionTable 1 (list 0 0 0 0 0 0 varName incur_replace_chance 1 1)
    ]
    [
      ;; Implement full incursion progression file
      let incursionFileData remove-item 0 csv:from-file input_incursion_table
      file-close
      set incursionTable table:make
      let i 0
      foreach incursionFileData [ x -> 
        table:put incursionTable i x
        table:put recoverCountByVariant (item 6 x) 0
        set i i + 1
      ]
  ])
  
  set incursionPhaseIndex -1 ; Not yet initialised
  set incursionPhaseEndDay 0
  
  set global_incursionArrivals 0
  set global_incursionRisk 0
  set global_incursionVaccArrivals 0
  set global_incursionVaccRisk 0
  set global_incursionVaccType 0
  set global_incursionVariant 0
  set global_incursionReplaceChance 0
end

to incursion_update
  if not first_case_calibrate [
  
    ;; Happens at the start of the first 'go', since days = 0
    ;print (word days ", " incursionPhaseEndDay)
    if days >= incursionPhaseEndDay [
      if table:has-key? incursionTable (incursionPhaseIndex + 1) [
        set incursionPhaseIndex incursionPhaseIndex + 1
        if _param_incur_phase_limit = -1 or incursionPhaseIndex <= _param_incur_phase_limit [
          let phaseData table:get incursionTable incursionPhaseIndex
          let phaseDays (item 0 phaseData) * incursion_phase_speed_mult
          
          set incursionPhaseEndDay (incursionPhaseEndDay + phaseDays)
          set global_incursionArrivals item 1 phaseData
          set global_incursionRisk item 2 phaseData
          set global_incursionVaccArrivals item 3 phaseData
          set global_incursionVaccRisk item 4 phaseData
          set global_incursionVaccType item 5 phaseData
          set global_incursionVariant item 6 phaseData
          set global_incursionReplaceChance item 7 phaseData
          if incur_replace_chance >= 0 [
           set global_incursionReplaceChance incur_replace_chance
          ]
        ]
      ]
    ]
    
    let peoplePerSimul scaledPopulation * extraScaleFactor / Population
    if days > 0 and global_incursionVariant != 0 [
      if peoplePerSimul <= 1 [
        if rngs:rnd-beta incursionsSeedID 1 1 < 0.2 [
          ask n-of 1 simuls with [color != red and color != black] [
            simul_setNewInfection global_incursionVariant 0 1
            set contact_events 0
            set contributeToR true
            simul_updateVariantParams
            
            set infectedContactList table:make
            set traceAttempts 0
            set selfTraceEffMult 1
            
            set hasKnownContact false
            set myScale 0
            
            set isolating 0
            set infectionsToday_acc infectionsToday_acc + peoplePerSimul
            set new_case_real_counter new_case_real_counter + peoplePerSimul
          ]
        ]
      ]
    ]
    
    
    if global_incursionArrivals > 0 [
      ask n-of (floor (global_incursionArrivals * _param_incurMult + rngs:rnd-beta incursionsSeedID 1 1)) simuls with [color != red and color != black] [
        if draw_borderIncursionRisk * global_incursionRisk > peoplePerSimul * ( rngs:rnd-beta incursionsSeedID 1 1 ) [
          set color red
          set contributeToR true
          set infectedContactList table:make
          set hasKnownContact false
          set traceAttempts 0
          set myScale scalephase
          
          set infectVariant global_incursionVariant
          simul_updateVariantParams
          set timenow random (floor min (list incur_timenow_limit ownIllnessPeriod)) ; Set after update vaccine update because it changes illnessPeriod
          
          set timenow 0
          set isolating 0
          set noticeOwnInfection 0
          
          set new_case_real_counter new_case_real_counter + peoplePerSimul
          set totalOverseasIncursions totalOverseasIncursions + peoplePerSimul
          if count_incursion [
            array:set infectNoVacArray cohortIndex (array:item infectNoVacArray cohortIndex) + peoplePerSimul
          ]
        ]
      ]
    ]
    
    if global_incursionVaccArrivals > 0 [
      ask n-of (floor ((global_incursionVaccArrivals * _param_vacIncurMult) + rngs:rnd-beta incursionsSeedID 1 1)) simuls with [color != red and color != black] [
        if global_incursionVaccRisk > peoplePerSimul * ( rngs:rnd-beta incursionsSeedID 1 1 ) [
          set color red
          set contributeToR true
          set infectedContactList table:make
          set hasKnownContact false
          set traceAttempts 0
          set myScale scalephase
          
          set infectVariant global_incursionVariant
          simul_updateVariantParams
          set timenow random (floor min (list incur_timenow_limit ownIllnessPeriod)) ; Set after update vaccine update because it changes illnessPeriod
          
          set timenow 0
          set isolating 0
          set noticeOwnInfection 0
          
          set new_case_real_counter new_case_real_counter + peoplePerSimul
          set totalOverseasIncursions totalOverseasIncursions + peoplePerSimul
          if count_incursion [
            array:set infectVacArray cohortIndex (array:item infectVacArray cohortIndex) + peoplePerSimul
          ]
        ]
      ]
    ]
  ]
end

