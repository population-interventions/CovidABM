
to setup_vaccineData
  let vaccineFileData remove-item 0 csv:from-file "vaccine.csv"
  set vaccineTable table:make
  let i 0
  foreach vaccineFileData [ x -> 
    table:put vaccineTable i x
    set i i + 1
  ]
  
  set vaccinePhaseIndex -1 ; Not yet initialised
  set vaccinePhaseEndDay 0
  
  set global_vaccinePhase 0
  set global_vaccineSubPhase 0
  set global_vaccineAvailible 0
  set global_vaccineType 0
  set global_vaccinePerDay 0
  set global_vaccine_eff 0
  set global_incursionScale 0
  set global_incursionArrivals 0
end

to setup_overseasArrivals
  set incursionsSeedID 2
  rngs:set-seed incursionsSeedID random-float 999
end

to vaccine_do_incursion_based_on_phase
  ;; Don't incursion in calibration runs
  if Vaccine_Available [
    let peoplePerSimul ( Scale_Factor ^ scalephase )
    set global_incursionRisk ( draw_borderIncursionRisk * global_incursionScale )
    ask n-of global_incursionArrivals simuls with [color != red and color != black] [
      if global_incursionRisk > peoplePerSimul * ( rngs:rnd-beta incursionsSeedID 1 1 ) [
        set color red
        set timenow 0
        set isolating 0
        set noticeOwnInfection 0
        set new_case_real_counter new_case_real_counter + peoplePerSimul
        set totalOverseasIncursions totalOverseasIncursions + peoplePerSimul
        ifelse vaccinated = 1
        [
          array:set infectVacArray cohortIndex (array:item infectVacArray cohortIndex) + peoplePerSimul
        ]
        [
          array:set infectNoVacArray cohortIndex (array:item infectNoVacArray cohortIndex) + peoplePerSimul
        ]
      ]
    ]
  ]
end

to vaccine_brand_update
  if global_vaccineType = "Pfizer" [
    set global_vaccine_eff (1 - param_vac1_tran_reduct / 100) ^ (1 / 3)
  ]
  if global_vaccineType = "Other" [
    set global_vaccine_eff (1 - param_vac2_tran_reduct / 100) ^ (1 / 3)
  ]
end

to vaccine_update
  ;; Happens at the start of the first 'go', since days = 0
  if days >= vaccinePhaseEndDay [
    if table:has-key? vaccineTable (vaccinePhaseIndex + 1) [
      set vaccinePhaseIndex vaccinePhaseIndex + 1
      let phaseData table:get vaccineTable vaccinePhaseIndex
      
      ;print "Old vaccine total pop and unvaccinated pop"
      ;print count simuls with [VaccPhase = global_vaccinePhase and VaccSubPhase = global_vaccineSubPhase]
      ;print count simuls with [VaccPhase = global_vaccinePhase and VaccSubPhase = global_vaccineSubPhase and vaccinated = 0]
      
      set vaccinePhaseEndDay (vaccinePhaseEndDay + item 2 phaseData)
      set global_vaccineAvailible 0
      set global_vaccinePhase item 0 phaseData
      set global_vaccineSubPhase item 1 phaseData
      set global_vaccinePerDay (item 3 phaseData)/(item 2 phaseData) + 0.00001 ; Floats
      set global_vaccineType item 4 phaseData
      set global_incursionScale item 5 phaseData
      set global_incursionArrivals item 6 phaseData
      
      vaccine_brand_update
      
      ;print "New vaccine phase"
      ;print global_vaccinePhase
      ;print global_vaccineSubPhase
      ;print global_vaccinePerDay
      ;print vaccinePhaseEndDay
    ]
  ]
  
  set global_vaccineAvailible global_vaccineAvailible + global_vaccinePerDay
end


to simul_vaccinate_me
  if vacWaitDays > 0 [
    set vacWaitDays vacWaitDays - 1
    if vacWaitDays = 0 [
      set shape "person"
      set vaccinated 1
      
      ;; Reduce illness length
      ;; This creates a similar triangle with its left corner at Non_Infective_Time and base length scaled by selfVaccEffMultiplier.
      ;show (word "incBefore " ownincubationperiod ", " ownillnessperiod)
      set ownincubationperiod ((ownincubationperiod - Non_Infective_Time) * selfVaccEffMultiplier) + Non_Infective_Time
      set ownillnessperiod ((ownillnessperiod - Non_Infective_Time) * selfVaccEffMultiplier) + Non_Infective_Time
      ;show (word "inc " ownincubationperiod ", " ownillnessperiod)
    ]
  ]
  
  if Vaccine_Available = true and global_vaccineAvailible >= 1 [
    if VaccPhase = global_vaccinePhase and VaccSubPhase = global_vaccineSubPhase and vaccinated = 0 and color != black and vaccineOffered = 0 [
      ;; TODO for some reason people use up a vaccine even if they refuse it, but if this wasn't the case then param_vac_uptake
      ;; would mean very little. Figure out what is going on here conceptually.
      set vaccineOffered 1
      set selfVaccEffMultiplier global_vaccine_eff
      set global_vaccineAvailible global_vaccineAvailible - 1
      if sm_vac_uptake < param_vac_uptake [
        set vacWaitDays param_vacEffDays
      ]
    ]
  ]
end
