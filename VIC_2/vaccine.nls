
to setup_vaccineData
  let vaccineTypeFileData remove-item 0 csv:from-file "input/vaccine_rollout.csv"
  set vaccineRolloutTable table:make
  let i 0
  foreach vaccineTypeFileData [ x -> 
    table:put vaccineRolloutTable i x
    set i i + 1
  ]
  
  set vaccinePhaseIndex -1 ; Not yet initialised
  set vaccinePhaseEndDay 0
  
  set global_vaccinePhase 0
  set global_vaccineSubPhase 0
  set global_vaccineAvailible 0
  set global_vaccinePerDay 0
  
  let vaccineParamsFileData remove-item 0 csv:from-file "input/vaccine_params.csv"
  set vaccineParamsTable table:make
  set i 0
  foreach vaccineParamsFileData [ rawData -> 
    let vacName item 0 rawData
    let vacTransReduct rngs:rnd-beta vaccineEffseedID (item 1 rawData) (item 2 rawData)
    let vacAreaReduct rngs:rnd-beta vaccineEffseedID (item 3 rawData) (item 4 rawData)
    let partialDays item 5 rawData
    let partialTrans_mult item 6 rawData
    let partialReduct_mult item 7 rawData
    table:put vaccineParamsTable vacName (list vacTransReduct vacAreaReduct partialDays partialTrans_mult partialReduct_mult)
  ]
end

to vaccine_update
  ;; Happens at the start of the first 'go', since days = 0
  if days >= vaccinePhaseEndDay and param_vac_rate_mult > 0 [
    if table:has-key? vaccineRolloutTable (vaccinePhaseIndex + 1) [
      set vaccinePhaseIndex vaccinePhaseIndex + 1
      let phaseData table:get vaccineRolloutTable vaccinePhaseIndex
      if param_final_phase = -1 or (item 0 phaseData) <= param_final_phase [
        
        ;print "Old vaccine total pop and unvaccinated pop"
        ;print count simuls with [VaccPhase = global_vaccinePhase and VaccSubPhase = global_vaccineSubPhase]
        ;print count simuls with [VaccPhase = global_vaccinePhase and VaccSubPhase = global_vaccineSubPhase and vaccinated = 0]
        
        set global_vaccinePhase item 0 phaseData
        set global_vaccineSubPhase item 1 phaseData
        let phaseDays (item 2 phaseData) 
        let phaseAtFixedSpeed item 3 phaseData
        set global_vaccineUptakeOverride item 4 phaseData
        if phaseAtFixedSpeed = 0 [
          set phaseDays phaseDays / param_vac_rate_mult
        ]
        
        ;; Sum simulants in the vaccination phase.
        let phasePop 0
        foreach popDivisionTable_keys [ pop_index ->
          let cohortData table:get popDivisionTable pop_index
          let cohort_phase item 6 cohortData
          let cohort_subPhase item 7 cohortData
          if cohort_phase = global_vaccinePhase and cohort_subPhase = global_vaccineSubPhase [
            ;; Add population and subtract already vaccinated.
            set phasePop phasePop + (item 0 cohortData) - (item 13 cohortData)
          ]
          if global_vaccineUptakeOverride > 0 [
            let cohort table:get populationCohortCache pop_index
            ask cohort with [ selfVaccEff_raw_risk = 0 and vaccineOffered = 1 and sm_vac_uptake < global_vaccineUptakeOverride ] [
              set phasePop phasePop + 1
              set vaccineOffered 0
            ]
          ]
        ]
        ;print phasePop
        
        set vaccinePhaseEndDay (vaccinePhaseEndDay + phaseDays)
        set global_vaccineAvailible 0
        set global_vaccinePerDay phasePop / phaseDays + 0.00001 ; Floats
        
        ;print "New vaccine phase"
        ;print global_vaccinePhase
        ;print global_vaccineSubPhase
        ;print global_vaccinePerDay
        ;print vaccinePhaseEndDay
      ]
    ]
  ]
  
  set global_vaccineAvailible global_vaccineAvailible + global_vaccinePerDay
end

to simul_set_vaccine_params
  let myVaccineData table:get vaccineParamsTable vaccineType
  set selfVaccEff_raw_area item 0 myVaccineData
  set selfVaccEff_raw_risk item 1 myVaccineData
  if vacWaitDays > 0 [
    set selfVaccEff_raw_area selfVaccEff_raw_area * item 3 myVaccineData
    set selfVaccEff_raw_risk selfVaccEff_raw_area * item 4 myVaccineData
  ]
  simul_updateVacAndReinfectMult
  ;print selfVaccEff_raw_area
  ;print selfVaccEff_raw_risk
end

to simul_admininster_vaccine
  let myVaccineData table:get vaccineParamsTable vaccineType
  set vacWaitDays item 2 myVaccineData
  simul_set_vaccine_params
end

to simul_vaccinate_me
  if vacWaitDays > 0 [
    set vacWaitDays vacWaitDays - 1
    if vacWaitDays = 0 [
      simul_updateVacAndReinfectMult
    ]
  ]
  
  if Vaccine_Available = true and global_vaccineAvailible >= 1 [
    if VaccPhase <= global_vaccinePhase and VaccSubPhase <= global_vaccineSubPhase and selfVaccEff_raw_risk = 0 and vaccineOffered = 0 [
      ;; TODO for some reason people use up a vaccine even if they refuse it, but if this wasn't the case then param_vac_uptake
      ;; would mean very little. Figure out what is going on here conceptually.
      set vaccineOffered 1
      set global_vaccineAvailible global_vaccineAvailible - 1
      ifelse sm_vac_uptake < param_vac_uptake
      [
        simul_admininster_vaccine
      ]
      [
        if ignoreUptakeOverride = 0 and global_vaccineUptakeOverride > 0 [
          if sm_vac_uptake < global_vaccineUptakeOverride [
            simul_admininster_vaccine
          ]
        ]
      ]
    ]
  ]
end

to simul_vaccinate_me_force
  if Vaccine_Available = true [
    set vaccineOffered 1
    simul_set_vaccine_params
    simul_updateVacAndReinfectMult
  ]
end
