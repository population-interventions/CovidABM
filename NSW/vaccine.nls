
to setup_vaccineData
  let vaccineTypeFileData remove-item 0 csv:from-file input_vaccine_table
  set vaccineRolloutTable table:make
  let i 0
  foreach vaccineTypeFileData [ x -> 
    table:put vaccineRolloutTable i x
    set i i + 1
  ]
  
  set vaccinePhaseIndex -1 ; Not yet initialised
  set vaccineActiveAgentSet -1 ; Not yet initialised
  
  set global_vaccinePhase 0
  set global_vaccineSubPhase 0
  set global_vaccineAvailible 0
  set global_vaccinePerDay 0
  set global_vaccinePending 0
  
  set vacineEff_nameOut []
  set vacineEff_transOut []
  set vacineEff_areaOut []
  
  let vaccineParamsFileData remove-item 0 csv:from-file "input/vaccine_params.csv"
  set vaccineParamsTable table:make
  set i 0
  foreach vaccineParamsFileData [ rawData -> 
    let vacName item 0 rawData
    let vacTransReduct rngs:rnd-beta vaccineEffseedID (item 1 rawData) (item 2 rawData)
    let vacAreaReduct rngs:rnd-beta vaccineEffseedID (item 3 rawData) (item 4 rawData)
    let partialDays item 5 rawData
    let partialTrans_mult item 6 rawData
    let partialReduct_mult item 7 rawData
    table:put vaccineParamsTable vacName (list vacTransReduct vacAreaReduct partialDays partialTrans_mult partialReduct_mult)
    
    set vacineEff_nameOut lput vacName vacineEff_nameOut
    set vacineEff_transOut lput vacTransReduct vacineEff_transOut
    set vacineEff_areaOut lput vacAreaReduct vacineEff_areaOut
  ]
end

to vaccine_nextPhase
  ifelse table:has-key? vaccineRolloutTable (vaccinePhaseIndex + 1)
  [
    set vaccinePhaseIndex vaccinePhaseIndex + 1
    let phaseData table:get vaccineRolloutTable vaccinePhaseIndex
    if param_final_phase = -1 or (item 0 phaseData) <= param_final_phase [
      
      ;print "Old vaccine total pop and unvaccinated pop"
      ;print count simuls with [VaccPhase = global_vaccinePhase and VaccSubPhase = global_vaccineSubPhase]
      ;print count simuls with [VaccPhase = global_vaccinePhase and VaccSubPhase = global_vaccineSubPhase and vaccinated = 0]
      
      set global_vaccinePhase item 0 phaseData
      set global_vaccineSubPhase item 1 phaseData
      set global_vaccinePerDay (item 2 phaseData) + 0.00001 ; Floats
      let vaccineUptake item 3 phaseData
      
      set vaccineActiveAgentSet simuls with [
        VaccPhase = global_vaccinePhase and 
        VaccSubPhase = global_vaccineSubPhase
      ]
      
      set global_vaccinePending floor(vaccineUptake * (count vaccineActiveAgentSet) + 0.5)
      let unvaccinatedCount count (vaccineActiveAgentSet with [vaccineOffered = 0])
      if unvaccinatedCount < global_vaccinePending [
        set global_vaccinePending unvaccinatedCount
      ]
      
      ;print "New vaccine phase"
      ;print global_vaccinePhase
      ;print global_vaccineSubPhase
      ;print global_vaccinePerDay
      ;print global_vaccinePending
    ]
  ]
  [
    set global_vaccineAvailible -1
  ]
end

to simul_set_vaccine_params
  let myVaccineData table:get vaccineParamsTable vaccineType
  set selfVaccEff_raw_area item 0 myVaccineData
  set selfVaccEff_raw_risk item 1 myVaccineData
  if vacWaitDays > 0 [
    set selfVaccEff_raw_area selfVaccEff_raw_area * item 3 myVaccineData
    set selfVaccEff_raw_risk selfVaccEff_raw_area * item 4 myVaccineData
  ]
  simul_updateVacAndReinfectMult
  ;print selfVaccEff_raw_area
  ;print selfVaccEff_raw_risk
end

to simul_admininster_vaccine
  let myVaccineData table:get vaccineParamsTable vaccineType
  set vacWaitDays item 2 myVaccineData
  simul_set_vaccine_params
end

to simul_vaccinate_updateSecondDose
  if vacWaitDays > 0 [
    set vacWaitDays vacWaitDays - 1
    if vacWaitDays = 0 [
      simul_updateVacAndReinfectMult
    ]
  ]
end
  
to simul_vaccinate_me
  set vaccineOffered 1
  simul_admininster_vaccine
end

to simul_vaccinate_me_force
  if Vaccine_Available = true [
    set vaccineOffered 1
    simul_set_vaccine_params
    simul_updateVacAndReinfectMult
  ]
end

to vaccine_update
  if global_vaccineAvailible > -1 and Vaccine_Available = True [
    ;; Vaccine over if global_vaccineAvailible = -1
    
    if vaccinePhaseIndex = -1 [
      vaccine_nextPhase 
    ]
    set global_vaccineAvailible global_vaccineAvailible + global_vaccinePerDay
    
    while [global_vaccineAvailible >= 1] [
      let vaccinateToday floor(global_vaccineAvailible)
      if vaccinateToday > global_vaccinePending [
        set vaccinateToday global_vaccinePending 
      ]
      
      ask n-of (vaccinateToday) (vaccineActiveAgentSet with [vaccineOffered = 0]) [
        simul_vaccinate_me
      ]
      
      set global_vaccineAvailible global_vaccineAvailible - vaccinateToday
      set global_vaccinePending global_vaccinePending - vaccinateToday
      
      if global_vaccinePending <= 0 [
        vaccine_nextPhase 
      ]
    ]
  ]
end

