
to-report AddLogOdds [prob toAdd]
  let odds exp ((ln (prob / ( 1 - prob))) + toAdd)
  report odds / (odds + 1)
end

to setup_doseTable
  ifelse input_dose_rate_table != ""
  [
    let doseFileData csv:from-file input_dose_rate_table
    set vaccineDoseRateTable table:make
    let i -1
    let j 0
    let header 0
    foreach doseFileData [ x -> 
      ifelse i = -1
      [
        set header x
        foreach x [ y -> 
          table:put vaccineDoseRateTable y table:make
        ]
      ]
      [
        set j 0
        foreach x [ y -> 
          table:put (table:get vaccineDoseRateTable (item j header)) i y
          set j j + 1
        ]
      ]
      set i i + 1
    ]
    ;print (word "vaccineDoseRateTable " vaccineDoseRateTable)
  ]
  [
    set vaccineDoseRateTable false
  ]
end

to setup_vaccineData
  let inputFile (word input_vaccine_table data_suffix)
  if not suffix_rollout [
    set inputFile input_vaccine_table
  ]
  let vaccineTypeFileData remove-item 0 csv:from-file inputFile
  set vaccineRolloutTable table:make
  set vaccineBranches []
  
  set vaccinePhaseIndex table:make
  set vaccineBranchStartIndex table:make
  set global_vaccineAvailible table:make
  set global_vaccineSecondAvailible table:make
  set global_firstDoseDone table:make
  
  let i 0
  foreach vaccineTypeFileData [ x -> 
    table:put vaccineRolloutTable i x
    let branch (item 0 x)
    if not member? branch vaccineBranches  [
      set vaccineBranches lput branch vaccineBranches
      table:put vaccinePhaseIndex branch -1
      table:put global_vaccineAvailible branch 0
      table:put global_vaccineSecondAvailible branch 0
      table:put vaccineBranchStartIndex branch i
      table:put global_firstDoseDone branch false
    ]
    set i i + 1
  ]
  ;print (word "vaccineBranchStartIndex " vaccineBranchStartIndex)
  ;print (word "vaccineBranches " vaccineBranches)
  
  set vaccineActiveAgentSet table:make
  set global_vaccinePhase table:make
  set global_vaccineSubPhase table:make
  set global_vaccinePerDay table:make
  set global_vaccineFirstDoseReserveProp table:make
  
  setup_doseTable
  
  set vacineEff_nameOut []
  set vacineEff_transOut []
  set vacineEff_areaOut []
  
  let vaccineParamsFileData remove-item 0 csv:from-file input_vac_params
  set vaccineParamsTable table:make
  set vaccineParams_riskMult table:make
  set vaccineParams_infectMult table:make
  set i 0
  foreach vaccineParamsFileData [ rawData -> 
    let vacName item 0 rawData
    let vacRiskReduct rngs:rnd-beta vaccineEffseedID (item 1 rawData) (item 2 rawData)
    let vacInfectReduct rngs:rnd-beta vaccineEffseedID (item 3 rawData) (item 4 rawData)
    if param_override_ve >= 0 [
      set vacRiskReduct param_override_ve
    ]
    if param_override_ve_area >= 0 [
      set vacInfectReduct param_override_ve_area
    ]
    let partialDays item 5 rawData
    let vacEffectDays item 6 rawData
    table:put vaccineParamsTable vacName (list vacRiskReduct vacInfectReduct partialDays vacEffectDays)
    table:put vaccineParams_riskMult vacName (list (item 7 rawData) (item 8 rawData) (item 9 rawData))
    table:put vaccineParams_infectMult vacName (list (item 10 rawData) (item 11 rawData) (item 12 rawData))
    
    set vacineEff_nameOut lput vacName vacineEff_nameOut
    set vacineEff_transOut lput vacRiskReduct vacineEff_transOut
    set vacineEff_areaOut lput vacInfectReduct vacineEff_areaOut
  ]
end

to simul_vaccinate_me_force [daysSinceFirstDose daysSinceSecondDose effectDays]
  if Vaccine_Available = true [
    set vaccineOffered 1
    simul_updateVacAndReinfectMult
  ]
end

to add_vaccine [branch]
  ifelse vaccineDoseRateTable = false
  [
    table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) + (table:get global_vaccinePerDay branch))
  ]
  [
    ;; global_vaccinePerDay acts as a rate multiplier
    let increase 0
    if table:has-key? (table:get vaccineDoseRateTable branch) (ticks - start_day) [
      set increase (table:get (table:get vaccineDoseRateTable branch) (ticks - start_day)) * (table:get global_vaccinePerDay branch)
    ]
    set increase increase
    table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) + increase)  
  ]
end

to vaccineMode_micromanageDoses [branch]
  if (table:get global_vaccineAvailible branch) > -1 [
    ;; Vaccine over if global_vaccineAvailible = -1
    
    add_vaccine branch
    let vaccinateToday floor(table:get global_vaccineAvailible branch)

    while [(table:get global_vaccineAvailible branch) >= 1] [
      let askSimuls ((table:get vaccineActiveAgentSet branch) with [vaccineOffered = 0])
      if count askSimuls < vaccinateToday [
        set vaccinateToday count askSimuls
      ]
      ask n-of (vaccinateToday) askSimuls [
        ;simul_vaccinate_me
      ]
      
      table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) - vaccinateToday)
    ]
  ]
end

to vaccine_update
  if start_case_threshold < 0 and Vaccine_Available = True [
    foreach vaccineBranches [ branch -> 
      vaccineMode_micromanageDoses branch
    ]
  ]
end
