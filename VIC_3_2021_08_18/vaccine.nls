
to setup_doseTable
  ifelse input_dose_rate_table != ""
  [
    let doseFileData csv:from-file input_dose_rate_table
    set vaccineDoseRateTable table:make
    let i -1
    let j 0
    let header 0
    foreach doseFileData [ x -> 
      ifelse i = -1
      [
        set header x
        foreach x [ y -> 
          table:put vaccineDoseRateTable y table:make
        ]
      ]
      [
        set j 0
        foreach x [ y -> 
          table:put (table:get vaccineDoseRateTable (item j header)) i y
          set j j + 1
        ]
      ]
      set i i + 1
    ]
    ;print (word "vaccineDoseRateTable " vaccineDoseRateTable)
  ]
  [
    set vaccineDoseRateTable false
  ]
end

to setup_vaccineData
  let inputFile (word input_vaccine_table data_suffix)
  if not suffix_rollout [
    set inputFile input_vaccine_table
  ]
  let vaccineTypeFileData remove-item 0 csv:from-file inputFile
  set vaccineRolloutTable table:make
  set vaccineBranches []
  
  set vaccinePhaseIndex table:make
  set vaccineBranchStartIndex table:make
  set global_vaccineAvailible table:make
  set global_vaccineSecondAvailible table:make
  set global_firstDoseDone table:make
  
  let i 0
  foreach vaccineTypeFileData [ x -> 
    table:put vaccineRolloutTable i x
    let branch (item 0 x)
    if not member? branch vaccineBranches  [
      set vaccineBranches lput branch vaccineBranches
      table:put vaccinePhaseIndex branch -1
      table:put global_vaccineAvailible branch 0
      table:put global_vaccineSecondAvailible branch 0
      table:put vaccineBranchStartIndex branch i
      table:put global_firstDoseDone branch false
    ]
    set i i + 1
  ]
  ;print (word "vaccineBranchStartIndex " vaccineBranchStartIndex)
  ;print (word "vaccineBranches " vaccineBranches)
  
  set vaccineActiveAgentSet table:make
  set global_vaccinePhase table:make
  set global_vaccineSubPhase table:make
  set global_vaccinePerDay table:make
  set global_vaccineFirstDoseReserveProp table:make
  
  setup_doseTable
  
  set vacineEff_nameOut []
  set vacineEff_transOut []
  set vacineEff_areaOut []
  
  let vaccineParamsFileData remove-item 0 csv:from-file input_vac_params
  set vaccineParamsTable table:make
  set i 0
  foreach vaccineParamsFileData [ rawData -> 
    let vacName item 0 rawData
    let vacRiskReduct rngs:rnd-beta vaccineEffseedID (item 1 rawData) (item 2 rawData)
    let vacInfectReduct rngs:rnd-beta vaccineEffseedID (item 3 rawData) (item 4 rawData)
    let vacHospReduct rngs:rnd-beta vaccineEffseedID (item 5 rawData) (item 6 rawData)
    let vacMortReduct rngs:rnd-beta vaccineEffseedID (item 7 rawData) (item 8 rawData)
    if param_override_ve >= 0 [
      set vacRiskReduct param_override_ve
    ]
    if param_override_ve_area >= 0 [
      set vacInfectReduct param_override_ve_area
    ]
    let partialDays item 9 rawData
    let partialRisk_mult item 10 rawData
    let partialInfect_mult item 11 rawData
    let partialHosp_mult item 12 rawData
    let partialMort_mult item 13 rawData
    let vacEffectDays item 14 rawData
    table:put vaccineParamsTable vacName (list vacRiskReduct vacInfectReduct vacHospReduct vacMortReduct partialRisk_mult partialInfect_mult partialHosp_mult partialMort_mult partialDays vacEffectDays)
    
    set vacineEff_nameOut lput vacName vacineEff_nameOut
    set vacineEff_transOut lput vacRiskReduct vacineEff_transOut
    set vacineEff_areaOut lput vacInfectReduct vacineEff_areaOut
  ]
end

to setup_agentsByVaccPhase
  set agentsByVaccPhase []
  foreach table:keys vaccineRolloutTable [ x -> 
    let phaseData table:get vaccineRolloutTable x
    let local_branch (item 0 phaseData)
    let local_vacPhase (item 1 phaseData)
    let local_vacSubPhase (item 2 phaseData)
    
    set agentsByVaccPhase lput (list
      local_branch
      local_vacPhase
      local_vacSubPhase
      simuls with [
        VaccPhase = local_vacPhase and 
        VaccSubPhase = local_vacSubPhase and
        vaccBranch = local_branch
    ]) agentsByVaccPhase
  ]
end

to vaccine_nextPhase [branch]
  let index (table:get vaccinePhaseIndex branch) + 1
  if index = 0 [
    set index (table:get vaccineBranchStartIndex branch)
  ]
  
  ifelse (table:has-key? vaccineRolloutTable index) and (item 0 (table:get vaccineRolloutTable index) = branch)
  [
    table:put vaccinePhaseIndex branch index
    let phaseData table:get vaccineRolloutTable index
    ifelse param_final_phase = -1 or (item 1 phaseData) <= param_final_phase [
      ;print "Old vaccine total pop and unvaccinated pop"
      ;print count simuls with [VaccPhase = global_vaccinePhase and VaccSubPhase = global_vaccineSubPhase]
      ;print count simuls with [VaccPhase = global_vaccinePhase and VaccSubPhase = global_vaccineSubPhase and vaccinated = 0]
      
      let local_vacPhase (item 1 phaseData)
      let local_vacSubPhase (item 2 phaseData)
      table:put global_vaccinePerDay branch ((item 3 phaseData) * param_vac_rate_mult + 0.00001) ; Floats
      table:put global_vaccineFirstDoseReserveProp branch (item 5 phaseData)
      
      let agentSet simuls with [
        VaccPhase = local_vacPhase and 
        VaccSubPhase = local_vacSubPhase and
        vaccBranch = branch
      ]
      table:put global_vaccinePhase branch local_vacPhase
      table:put global_vaccineSubPhase branch local_vacSubPhase
      
      let phaseSizeTotal count agentSet
      set agentSet agentSet with [vaccineOffered = 0]
      let phaseUnvaccinated count agentSet
      
      let phaseUptakeMult (item 4 phaseData) * param_vac_uptake_mult
      let nextPhaseVacProp (item 6 phaseData)
      let agentsToVaccinate agentSet with [ vaccinePriority < cohortVacUptake * phaseUptakeMult ]
      
      if nextPhaseVacProp > 0 [
        set agentsToVaccinate n-of ((count agentsToVaccinate) * (1 - nextPhaseVacProp)) agentsToVaccinate
      ]
      table:put vaccineActiveAgentSet branch agentsToVaccinate
      
      ;print (word "New vaccine phase, branch: " branch)
      ;print (word "day: " ticks)
      ;print (word "total agents: " phaseSizeTotal ", phaseUnvaccinated: " phaseUnvaccinated)
      ;print (word "phase: " (table:get global_vaccinePhase branch) (table:get global_vaccineSubPhase branch))
      ;print (word "pending vaccine: " (table:get global_vaccinePending branch))
      ;print (word "per day: " global_vaccinePerDay)
      ;print (word "first priority: " (table:get global_vaccinePrioritiseFirstOverSecond branch))
      if print_phase [
       print (word "Day " ticks ", Branch " branch ", Phase " (table:get global_vaccinePhase branch) ", SubPhase " (table:get global_vaccineSubPhase branch))
      ]
    ]
    [
      table:put global_firstDoseDone branch true
    ]
  ]
  [
      table:put global_firstDoseDone branch true
  ]
end

to simul_set_vaccine_params
  if vaccineOffered = 1 [
    ifelse nextDoseTimer > 0 and vacEffectCountdown > 0 [
      ; Recieved first dose and it has not yet taken effect.
      set selfVaccEff_raw_area 0
      set selfVaccEff_raw_risk 0
    ]
    [
      let myVaccineData table:get vaccineParamsTable vaccineType
      set selfVaccEff_raw_risk item 0 myVaccineData
      set selfVaccEff_raw_area item 1 myVaccineData
      set selfVaccEff_raw_hosp item 2 myVaccineData
      set selfVaccEff_raw_mort item 3 myVaccineData
      if nextDoseTimer > 0 or vacEffectCountdown > 0 [
        ; Not yet recieved second dose or waiting for most recent dose to take effect.
        set selfVaccEff_raw_risk selfVaccEff_raw_risk * item 4 myVaccineData
        set selfVaccEff_raw_area selfVaccEff_raw_area * item 5 myVaccineData
        set selfVaccEff_raw_hosp selfVaccEff_raw_hosp * item 6 myVaccineData
        set selfVaccEff_raw_mort selfVaccEff_raw_mort * item 7 myVaccineData
      ]
      simul_updateVacAndReinfectMult
      ;print vaccineType
    ]
  ]
end

to simul_admininster_vaccine
  let myVaccineData table:get vaccineParamsTable vaccineType
  set nextDoseTimer item 8 myVaccineData
  set vacEffectCountdown item 9 myVaccineData
  simul_set_vaccine_params
end

to simul_vaccinate_updateSecondDose
  if param_vac_rate_mult > 0 and (vacEffectCountdown > 0 or nextDoseTimer > 0) [
    let needUpdate false
    if vacEffectCountdown > 0 [
      set vacEffectCountdown vacEffectCountdown - 1
      if vacEffectCountdown = 0 [
        set needUpdate true
      ]
    ]
    if nextDoseTimer > 0 [
      set nextDoseTimer nextDoseTimer - 1
      if nextDoseTimer = 0 [
        let vacAvailible table:get global_vaccineAvailible vaccBranch
        let vacSecondAvailible table:get global_vaccineSecondAvailible vaccBranch
        ifelse vacAvailible >= 1 and (vacSecondAvailible = true or vacSecondAvailible >= 1)
        [
          table:put global_vaccineAvailible vaccBranch (vacAvailible - 1)
          if vacSecondAvailible != true [
            table:put global_vaccineSecondAvailible vaccBranch (vacSecondAvailible - 1)
          ]
          let myVaccineData table:get vaccineParamsTable vaccineType
          set vacEffectCountdown item 9 myVaccineData
          set needUpdate true
        ]
        [
          set nextDoseTimer 1
        ]
      ]
    ]
    ;print (word "vacEffectCountdown " vacEffectCountdown ", nextDoseTimer " nextDoseTimer ", needUpdate " needUpdate)
    if needUpdate [
      simul_set_vaccine_params
      simul_updateVacAndReinfectMult
      ;print (word "Dose 2: " vaccPhase ", " vaccSubPhase ", " vaccBranch)
    ]
  ]
end
  
to simul_vaccinate_me
  set vaccineOffered 1
  simul_admininster_vaccine
end

to simul_vaccinate_me_force
  if Vaccine_Available = true [
    set vaccineOffered 1
    simul_set_vaccine_params
    simul_updateVacAndReinfectMult
  ]
end

to add_vaccine [branch]
  ifelse vaccineDoseRateTable = false
  [
    table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) + (table:get global_vaccinePerDay branch))
  ]
  [
    ;; global_vaccinePerDay acts as a rate multiplier
    let increase 0
    if table:has-key? (table:get vaccineDoseRateTable branch) (ticks - start_day) [
      set increase (table:get (table:get vaccineDoseRateTable branch) (ticks - start_day)) * (table:get global_vaccinePerDay branch)
    ]
    set increase increase
    table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) + increase)  
  ]  
end

to vaccine_update
  if start_case_threshold < 0 [
    foreach vaccineBranches [ branch -> 
      ;print (word "START " branch)
      if (table:get global_vaccineAvailible branch) > -1 and Vaccine_Available = True [
        ;; Vaccine over if global_vaccineAvailible = -1
        
        if (table:get vaccinePhaseIndex branch) = -1 [
          vaccine_nextPhase branch
        ]
        add_vaccine branch
        
        let local_phase table:get global_vaccinePhase branch
        let local_subPhase table:get global_vaccineSubPhase branch
        let firstDoseProp table:get global_vaccineFirstDoseReserveProp branch
        
        ;; Prioritise second doses over first doses.
        ;; Sometimes a phase may prioritise first doses over second doses for people in later phases.
        if firstDoseProp < 1 [
          table:put global_vaccineSecondAvailible branch ((table:get global_vaccineAvailible branch) * (1 - firstDoseProp))
          foreach agentsByVaccPhase [ simul_part ->
            ;if (item 0 simul_part) = branch and (((item 1 simul_part) < local_phase or ((item 1 simul_part) = local_phase and (item 2 simul_part) <= local_subPhase)) [
            if (item 0 simul_part) = branch [
              ask (item 3 simul_part) [
                simul_vaccinate_updateSecondDose
              ]
            ]
          ]
        ]
        
        while [(table:get global_vaccineAvailible branch) >= 1 and not (table:get global_firstDoseDone branch)] [
          let vaccinateToday floor(table:get global_vaccineAvailible branch)
          let askSimuls ((table:get vaccineActiveAgentSet branch) with [vaccineOffered = 0])
          if count askSimuls < vaccinateToday [
            set vaccinateToday count askSimuls
          ]
          ask n-of (vaccinateToday) askSimuls [
            simul_vaccinate_me
          ]
          
          table:put global_vaccineAvailible branch ((table:get global_vaccineAvailible branch) - vaccinateToday)
          
          ;print (word "p: " table:get global_vaccinePending branch)
          if (table:get global_vaccineAvailible branch) >= 1 [
            vaccine_nextPhase branch
          ]
        ]
        
        ;; Use remaining doses on second dose vaccination
        if firstDoseProp > 0 [
          table:put global_vaccineSecondAvailible branch true
          foreach agentsByVaccPhase [ simul_part ->
            ;if (item 0 simul_part) = branch and (((item 1 simul_part) < local_phase or ((item 1 simul_part) = local_phase and (item 2 simul_part) <= local_subPhase)) [
            if (item 0 simul_part) = branch [
              ask (item 3 simul_part) [
                simul_vaccinate_updateSecondDose
              ]
            ]
          ]
        ]
      ]
    ]
  ]
end

