

;;*******************************************************************************************************************************
;;** Scale Modification **
;;*******************************************************************************************************************************

to do_scaleup_cont
  let toScale redCount - Scale_Up_Threshold
  
  if toScale > 0 [
    set toScale toScale + scale_cont_buffer
    
    let redLower simuls with [color = red and myScale = scalePhase]
    let redUpper simuls with [color = red and myScale > scalePhase]
    
    ;print (word "Scale Up: " scalePhase ", Lower: " (count redLower) ", Upper: " (count redUpper) ", Max: " scalePhaseMax)
    
    let scaleExp 1
    if scalePhase >= scalePhaseMax [
      set scaleExp scalePhaseExtra
    ]
    
    let increaseNext 0
    ask redLower [
      ifelse increaseNext > 0
      [
        set myScale myScale + scaleExp
        set increaseNext increaseNext - 1
      ]
      [
        if toScale > 0 [
          simul_do_scaleup
          set increaseNext increaseNext + 1 / (Scale_Factor ^ scaleExp - 1)
          set toScale toScale - 1 
        ]
      ]
    ]
    
    if (toScale > 0 or increaseNext > 0) and scalePhase < scalePhaseMax [
      set scalePhase scalePhase + 1
      if scalePhase >= scalePhaseMax [
        set scaleExp scalePhaseExtra
      ]
      
      ask redUpper [
        ifelse increaseNext > 0
        [
          set myScale myScale + scaleExp
          set increaseNext increaseNext - 1
        ]
        [
          if toScale > 0 [
            simul_do_scaleup
            set increaseNext increaseNext + 1 / (Scale_Factor ^ scaleExp - 1)
            set toScale toScale - 1 
          ]
        ]
      ]
    ]
  ]
end

to do_scaledown_cont
  let toScale Scale_Down_Threshold - redCount
  
  if toScale > 0 [
    set toScale toScale + scale_cont_buffer
    if toScale < scale_cont_buffer [
      set toScale scale_cont_buffer
    ]
    
    let redLower simuls with [color = red and myScale = scalePhase]
    let redUpper simuls with [color = red and myScale > scalePhase]
    
    ;print (word "Scale Down: " scalePhase ", Lower: " (count redLower) ", Upper: " (count redUpper))
    
    let my_timenow                  0
    let my_caseReportTime           0
    let my_tracked                  0
    let my_R                        0
    let my_infectVariant            0
    let my_variantTransMult         0
    let my_contributeToR            0
    let my_vaccineIncursionOverride 0
    let my_hasKnownContact          0
    let my_traceAttempts            0
    let my_selfTraceEffMult         0
    let my_myScale                  0
    
    let thisSimul 0
    let otherSimul 0
    
    ask redUpper [
      if toScale > 0 [
        set my_timenow                  timenow
        set my_caseReportTime           caseReportTime
        set my_tracked                  tracked
        set my_R                        R
        set my_infectVariant            infectVariant
        set my_variantTransMult         variantTransMult
        set my_contributeToR            contributeToR
        set my_vaccineIncursionOverride vaccineIncursionOverride
        set my_hasKnownContact          hasKnownContact
        set my_traceAttempts            traceAttempts
        set my_selfTraceEffMult         selfTraceEffMult
        
        let toAsk Scale_Factor ^ (myScale - scalePhase) - 1 + random-float 1
        set toScale toScale - 1 
        set my_myScale scalePhase
    
        set thisSimul self
        
        if toAsk > random-float 1 [
          ask n-of 1 (GetUninfectedOfCohort cohortIndex) [
            set color red
            set timenow                  my_timenow
            set caseReportTime           my_caseReportTime
            set tracked                  my_tracked
            set R                        my_R
            set infectVariant            my_infectVariant
            set variantTransMult         my_variantTransMult
            set contributeToR            my_contributeToR
            set vaccineIncursionOverride my_vaccineIncursionOverride
            set hasKnownContact          my_hasKnownContact
            set traceAttempts            my_traceAttempts
            set selfTraceEffMult         my_selfTraceEffMult
            set myScale                  my_myScale
            
            table:put infectedContactList table:length infectedContactList thisSimul
            set otherSimul self
          ]
          table:put infectedContactList table:length infectedContactList otherSimul
        ]
        
        set myScale my_myScale
        set toScale toScale - 1 
      ]
    ]
    
    if toScale > 0 and scalePhase > 0 [
      set scalePhase scalePhase - 1
      
      ask redLower [
        if toScale > 0 [
          set my_timenow                  timenow
          set my_caseReportTime           caseReportTime
          set my_tracked                  tracked
          set my_R                        R
          set my_infectVariant            infectVariant
          set my_variantTransMult         variantTransMult
          set my_contributeToR            contributeToR
          set my_vaccineIncursionOverride vaccineIncursionOverride
          set my_hasKnownContact          hasKnownContact
          set my_traceAttempts            traceAttempts
          set my_selfTraceEffMult         selfTraceEffMult
          
          let toAsk Scale_Factor ^ (myScale - scalePhase) - 1
          set toScale toScale - 1 
          set my_myScale scalePhase
          
          set thisSimul self
          
          if toAsk > random-float 1 [
            ask n-of 1 (GetUninfectedOfCohort cohortIndex) [
              set color red
              set timenow                  my_timenow
              set caseReportTime           my_caseReportTime
              set tracked                  my_tracked
              set R                        my_R
              set infectVariant            my_infectVariant
              set variantTransMult         my_variantTransMult
              set contributeToR            my_contributeToR
              set vaccineIncursionOverride my_vaccineIncursionOverride
              set hasKnownContact          my_hasKnownContact
              set traceAttempts            my_traceAttempts
              set selfTraceEffMult         my_selfTraceEffMult
              set myScale                  my_myScale
              
              table:put infectedContactList table:length infectedContactList thisSimul
              set otherSimul self
            ]
            table:put infectedContactList table:length infectedContactList otherSimul
          ]
          
          set myScale my_myScale
        ]
      ]
    ]
  ]
end

to CheckScale_cont
  ;; this function scales up the simulation at base Scale_Factor to enable a small and large-scale understanding of dynamics.
  ;; It enables the fine-grained analysis in early stages that more closely resembles diffusion across a population similar to
  ;; assumptions in SEIR models but as it scales up, recognises that there are geographic constraints of movement of populations
  
  do_scaleup_cont
  do_scaledown_cont
end
