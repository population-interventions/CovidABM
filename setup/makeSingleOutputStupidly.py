

SINGLE_SUFFIX = '_out'

def FindVariablesAndEditGlobals(modelDir, singleList):
	modelFile = open('{}/globals.nls'.format(modelDir), 'r+')
	foundPart = False
	variables = []
	contents = []
	while True:
		# Get next line from file
		line = modelFile.readline()
		if len(line) == 0:
			break
		line = line.rstrip()
		if line == 'globals [':
			foundPart = True
		if (line == ']' and foundPart) or line == '  ;; Autogenerated follows':
			contents.append('  ;; Autogenerated follows\n')
			for singleRange in singleList:
				for var in variables:
					contents.append('  mid_{}_{}_{}\n'.format(singleRange[0], singleRange[1], var))
				contents.append('\n')
			contents.append(']\n')
			break
		found = line.find(SINGLE_SUFFIX)
		if found > -1 and found + 4 == len(line) and line.find('mid_') == -1 and line.find('sen_') == -1:
			print(line[2:])
			variables.append(line[2:])
		if line.find('  mid_') == -1:
			contents.append(line + '\n')
	modelFile.close()
	
	with open('{}/globals.nls'.format(modelDir), "w") as f:
		contents = ''.join(contents)
		f.write(contents)
	print('globals.nls Done')
	return variables


def EditBehaviourSpace(modelDir, singleList, variables):
	modelFile = open('{}/covidModel.nlogo'.format(modelDir), 'r+')
	foundPart = False
	contents = []
	while True:
		line = modelFile.readline()
		if len(line) == 0:
			break
		line = line.rstrip()
		if line.find('experiment name="vic_main"') > -1:
			foundPart = True
		if foundPart and line.find('enumeratedValueSet') > -1:
			for singleRange in singleList:
				for var in variables:
					contents.append('    <metric>mid_{}_{}_{}</metric>\n'.format(
						singleRange[0], singleRange[1], var))
			foundPart = False
		if line.find('<metric>mid_') == -1:
			contents.append(line + '\n')
	
	with open('{}/covidModel.nlogo'.format(modelDir), "w") as f:
		contents = ''.join(contents)
		f.write(contents)	
	print('covidModel.nlogo Done')
			

def MakeCostsMidFunction(contents, singleList, variables, singleAverages):
	contents.append('  ;; This function is generated by makeSingleOutputStupidly.py\n')
	ends = []
	for singleRange in singleList:
		if singleRange[1] not in ends:
			ends.append(singleRange[1])
	check = '  if'
	for num in ends:
		if len(check) > 5:
			check = check + ' or'
		check = check + ' days = {}'.format(num)
	check = check + ' [\n'
	contents.append(check)
	contents.append('    CalculateEndCosts\n')
	contents.append('    CalculateEndCounts\n')
	contents.append('  ]\n')
	contents.append('  \n')
	
	for singleRange in singleList:
		start = singleRange[0]
		end = singleRange[1]
		contents.append('  if days = {} [\n'.format(end))
		
		for var in variables:
			param = 'mid_{}_{}_{}'.format(start, end, var)
			if var not in singleAverages:
				if start == 0:
					contents.append('    set {} {}\n'.format(param, var))
				else:
					contents.append('    set {} {} - mid_{}_{}_{}\n'.format(param, var, 0, start, var))
			else:
				nume = 'mid_{}_{}_{}_out'.format(start, end, singleAverages[var][0])
				denom = 'mid_{}_{}_{}_out'.format(start, end, singleAverages[var][1])
				contents.append('    ifelse {} > 0 [set {} {} / {} ] [ set {} 0 ]\n'.format(denom, param, nume, denom, param))
				
		contents.append('  ]\n')


def EditCostsOutput(modelDir, singleList, variables, singleAverages):
	modelFile = open('{}/costs.nls'.format(modelDir), 'r+')
	contents = []
	while True:
		line = modelFile.readline()
		if len(line) == 0:
			break
		line = line.rstrip()
		if line.find('to CalculateMidCosts') > -1:
			contents.append('to CalculateMidCosts\n')
			MakeCostsMidFunction(contents, singleList, variables, singleAverages)
			contents.append('end\n')
			break
		contents.append(line + '\n')
		
	with open('{}/costs.nls'.format(modelDir), "w") as f:
		contents = ''.join(contents)
		f.write(contents)	
	print('costs.nls Done')


def MakeExtraSingleVariables(modelDir, singleList, singleAverages):
	variables = FindVariablesAndEditGlobals(modelDir, singleList)
	EditBehaviourSpace(modelDir, singleList, variables)
	EditCostsOutput(modelDir, singleList, variables, singleAverages)
